<!DOCTYPE html>
<html>
	<head>
		<title>Java</title>
		<link rel="stylesheet" href="css/atelier-sulphurpool-light.css" type="text/css">
		<script src="js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red}
		</style>
	</head>
	<body>
		<div class = "title">
			Enum
		</div>

		<div class = "block">
			<ul>
				<li>All enums implicitly extend java.lang.Enum class. As a class can only extend one parent in Java, so an enum cannot extend anything else.</li>
				<li>Every enum constant is always implicitly public static final. Since it is static, we can access it by using enum Name. Since it is final, we can’t create child enums.</li>
			</ul>
		</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
public enum Day
{
	Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
}
			</pre>
		</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
//internal implementation of Day
public enum Day
{
	public static final Day Monday = new Day();
	public static final Day Tuesday = new Day();
	public static final Day Wednesday = new Day();
	public static final Day Thursday = new Day();
	public static final Day Friday = new Day();
	public static final Day Saturday = new Day();
	public static final Day Sunday = new Day();
}
			</pre>
		</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
public class E
{
	public static void main(String args[])
	{
		Day d = Day.Monday;

		System.out.println(d);

		//valueOf
		System.out.println(d.valueOf("Sunday"));

		//values
		for(Day e : Day.values())
			System.out.println(e);

		System.out.println(Day.Saturday.ordinal());
	}
}
			</pre>
		</div>
		<div class = "subtitle">main method in enum</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
public enum Day
{
	Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday;

	public static void main(String args[])
	{
		Day d = Day.Sunday;

		System.out.println(d);
	}
}
			</pre>
		</div>
		<div class = "subtitle">enum and constructors</div>
		<div class = "block">
			<ul>
				<li>Enum constants are followed by arguments which are passed to the enum constructor</li>
				<li>Constructor is executed separately for each enum constant at the time of enum class loading</li>
				<li>Not able to create enum objects explicitly and hence we can’t invoke enum constructor directly</li>
			</ul>
		</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
public enum Car
{
	Camery("Toyota", 2010),
	Accord("Honda", 2016),
	Acura("Honda", 2000),
	Century("Buick", 1998);

	private final String maker;
	private final int year;

	Car(String m, int y)
	{
		maker = m;
		year = y;
	}

	public String getMaker()
	{
		return maker;
	}

	public int getYear()
	{
		return year;
	}
}
			</pre>
			<pre class = "prettyprint linenums">
public class CarTest
{
	public static void main(String args[])
	{
		for(Car b : Car.values())
			System.out.printf("%s: %s %d\n", b, b.getMaker(), b.getYear());

		Car c = Car.Accord;

		System.out.printf("%s %d\n", c.getMaker(), c.getYear());
	}
}
			</pre>
		</div>
		<div class = "subtitle">Access enum with index</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
public class E
{
	public static void main(String args[])
	{
		//index
		for(int i = 0, len = Day.values().length; i &lt; len; i++)
			System.out.println(Day.values()[i]);
	}
}
			</pre>
		</div>
		<div class = "subtitle">Compare enum objects</div>
		<div class = "block">
			<ul>
				<li>compareT(), negative, zero, positive integers for less than, equals, and greater than</li>
				<li>The natural order implemented by this method is the order in which the constants are declared</li>
			</ul>
		</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
public class E
{
	public static void main(String args[])
	{
		Day a = Day.Monday;
		Day b = Day.Tuesday;

		if(a.compareTo(b) &lt; 0)
			System.out.printf("%s &lt; %s\n", a, b);
	}
}
			</pre>
		</div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
			<ul>
				<li><a href = "http://www.geeksforgeeks.org/enum-in-java/">Enum at Geekforgeek</a></li>
				<li><a href = "https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Oracle Tutorial</a></li>
				<li><a href = "https://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html">Enum class</a></li>
				<li>Java How to Program</li>
			</ul>
		</div>
	</body>
</html>
