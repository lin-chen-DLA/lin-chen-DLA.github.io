<!DOCTYPE html>
<html>
	<head>
		<title>Algorithm</title>
		<link rel="stylesheet" href="css/atelier-sulphurpool-light.css" type="text/css">
		<script src="js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span.red {color: red; font-weight: bold;}
			span.blue {color: blue; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">Heap Tree</div>
		<div class = "block">
			<ul>
				<li>A nearly complete binary tree</li>
				<li>Tree is completely filled on all levels except possibly the lowest, which is filled from the left up to a point</li>
				<li>The tree is saved in an array</li>
				<li>Max-heap, the value of parent is greater than the value of its children</li>
				<li>Min-heap, the value of parent is less than the value of its children</li>
			</ul>
		</div>

		<div class = "block">
			<p style = "text-align:center;"><img src = "img/Heap.png" width = "80%"></p>
		</div>

		<div class = "subtitle">Heapify</div>
		<div class = "block">
			<ul>
				<li>T(n) &le; T(2n/3) + &Theta;(1)</li>
				<li>Master Theory: a = 1, b = 3/2, T(n) = log<sub>3/2</sub>n</li>
			</ul>
		</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
import java.util.*;

/* Define a Max-Heap
 * @author Lin Chen
 * @since 10.02.2017
 */
public class Heap
{
	/* Get the example in CLRS
	 * @return an intger array
	 */
	public static int [] getArray()
	{
		int array [] = {16, 14, 10, 8, 7, 9, 3, 2, 4, 1};

		return array;
	}

	/* Get an random array
	 * @return an random integer array
	 */
	public static int [] randArray(int size)
	{
		int array [] = new int[size];

		Random r = new Random();

		for(int i = 0; i &lt; size; i++)
			array[i] = r.nextInt(100);

		return array;
	}

	/* Get the left child
	 * @param i index of current node
	 * @return index of left child
	 */
	public static int getLeft(int i)
	{
		return i*2+1;
	}

	/* Get the right child
	 * @param i index of current node
	 * @return index of right child
	 */
	public static int getRight(int i)
	{
		return i*2+2;
	}

	/* Maintin the max-heap property of a subtree rooted at index i
	 * @param array an integer array
	 * @param i index of current node
	 * @param n index of last node of the subtree
	 */
	// O(lgn)
	public static void maxHeapify(int [] array, int i, int n)
	{
		int l = getLeft(i);//get left child
		int r = getRight(i);//get right child

		int largest = i;

		if(l &lt;= n && array[l] &gt; array[i])
			largest = l;

		if(r &lt;= n && array[r] &gt; array[largest])
			largest = r;

		if(largest != i)
		{
			int temp = array[i];
			array[i] = array[largest];
			array[largest] = temp;
			maxHeapify(array, largest, n);
		}
	}

	/* Create the heap tree for input array
	 * @param array an integer array
	 */
	// O(nlgn)
	public static void buildMaxHeap(int [] array)
	{
		for(int i = (array.length/2-1); i &gt;= 0; i--)
		{
			maxHeapify(array, i, array.length-1);
		}
	}

	/* Sort an array with heap tree
	 * @param array an integer array
	 */
	// O(nlgn)
	public static void heapSort(int [] array)
	{
		buildMaxHeap(array);
		display(array);
		for(int i = array.length-1; i &gt; 0; i--)
		{
			int temp = array[0];
			array[0] = array[i];
			array[i] = temp;
			maxHeapify(array, 0, i-1);
		}
	}

	/* Display an integer array
	 * @param array an integer array
	 */
	public static void display(int [] array)
	{
		for(int i = 0; i &lt; array.length; i++)
			System.out.printf("%5d", array[i]);
		System.out.println();
	}

	/* Test heap tree
	 */
	public static void main(String args[])
	{
		int [] array;
		//array = getArray();
		array = randArray(10);

		display(array);

		heapSort(array);

		display(array);
	}
}
			</pre>
		</div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
			<ul>
				<li>CLRS Chapter 6</li>
			</ul>
		</div>
	</body>
</html>
