<!DOCTYPE html>
<html>
	<head>
		<title>Docker</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Dockerfile
		</div>
        <div class = "subtitle">What a Dockerfile is doing?</div>
		<div class = "block">
            <li>1. Start from a Linux image</li>
		<pre class = "prettyprint linenums">
# Host
docker run -p 8000:8080 -it python sh
        </pre>
        <li>2. Copy the code to the running Linux container</li>
		<pre class = "prettyprint linenums">
# Host
docker cp local_code_dir [containerID|containerName]:/home
        </pre>
        <li>3. Install packages</li>
		<pre class = "prettyprint linenums">
# Container
cd /home/code_dir
pip install --no-cache-dir -r requirements.txt
        </pre>
        <li>4. Run and test the app in the container, may need to map port in step 1
		<pre class = "prettyprint linenums">
# Container
python app.py

# Host
localhost:8000
        </pre>
        </li>
        <li>5. Create a Dockerfile to automatically implement the commonds in step 1-4</li>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# app.py
import dash
from dash import html
from dash.dependencies import Input, Output

app = dash.Dash(__name__)
server = app.server

num_click = 0

app.layout = html.Div([
    html.Button('Click', id = 'click'),
    html.Div('0', id = 'content')
        ])

@app.callback(
    Output('content', 'children'),
    Input('click', 'n_clicks'))
def display_hover_data(c):
    if c:
        global num_click
        num_click += 1
        return num_click
    else:
        return 0

if __name__ == "__main__":
    app.run_server(host="0.0.0.0", port=8080, debug=True)
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# requirements.txt
dash
        </pre>
        </div>
        <div class = "subtitle">Dockerfile Format</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# A Dockerfile must begin with a FROM instruction
# Specifies the Parent Image
FROM imageName

# Execute any commands in a new layer on top of the current image and commit the result
# Committed image will be used for the next step in the Dockerfile
RUN [command]

# Provide defaults for an executing container
# Only one CMD instruction in a Dockerfile
CMD [command]
CMD echo "Hello World" # (shell form)
CMD ["echo", "Hello World"] # (exec form)

# Add metadata to an image
LABEL [metadata]

# Expose the container port number when running the container
# It functions as a type of documentation between developers and users, exposed port number should match the port number of the app
EXPOSE [portNumber]

# Sets the environment variable
ENV MY_NAME="Lin"

# Copy new files, directories or remote file URLs from &lt;src&gt; and adds them to the filesystem of the image at the path &lt;dest&gt;
# Copy and auto-extract tar files
ADD [src] [dest]

# Copy local files and directories from src to dest
COPY [src][dest]

# Configure a container that will run as an executable
# Cannot add a command after the image
# docker run [imageName], legal
# docker run [imageName] sh, illegal, sh is taken as the parameter of ENTRYPOINT command
ENTRYPOINT [command]

# Set the user name for RUN, CMD and ENTRYPOINT instructions
USER [userName]

# Set the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions
WORKDIR [dirName]

# Define the commands will be executed when the image is used as base
# Not affect the current image build
ONBUILD [DockerKey] [command]
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# Dockerfile
FROM python:3

WORKDIR /usr/src/app

COPY . .

RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 8080

CMD ["python", "./app.py"]
        </pre>
        </div>
        <div class = "subtitle">.dockerignore</div>
		<div class = "block">
            <li>Avoid unnecessarily sending large or sensitive files and directories to the daemon with ADD and COPY</li>
		<pre class = "prettyprint linenums">
# comment
*/temp*
*/*/temp*
temp?

*.md
!README.md # exception
        </pre>
        </div>
        <div class = "subtitle">Build Image</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
docker build -t [imageName] .

# Check the size of each layer
docker history [iamgeName]
        </pre>
        </div>
        <div class = "subtitle">Create Container</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
docker run [imageName]

# -e, create environment variables
docker run -e ENV_NAME=value [imageName]
        </pre>
        </div>
        <div class = "subtitle">Reference</div>
		<div class = "block">
            <li><a href = "https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a></li>
        </div>
	</body>
</html>
