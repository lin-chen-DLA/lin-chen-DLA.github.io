<!DOCTYPE html>
<html>
	<head>
		<title>Docker</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Count
		</div>
        <div class = "subtitle">Development Mode</div>
        <div class = "block">
            <p style = "text-align:center;"><img src = "img/Docker_12.png" width = "30%"></p>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# 1. Start a redis container
docker run -d -p 6379:6379 redis
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# 2. Create a Flask app
# app.py
import os
import time
import redis
from flask import Flask

def get_ip():
    """Receive hostname by an environment variable or using localhost
    """
    return os.getenv('MYREDIS_HOST', 'localhost')

app = Flask(__name__)
cache = redis.Redis(host=get_ip(), port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello from Docker! I have been seen {} times.\n'.format(count)

if __name__ == '__main__':
    app.run(debug=True, port=8080) # set up debug to be True to hot reload
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# 3. Run the app
python app.py
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
http://localhost:8080/
        </pre>
        </div>
        <div class = "subtitle">Deployment Mode</div>
        <div class = "block">
            <p style = "text-align:center;"><img src = "img/Docker_13.png" width = "30%"></p>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# app.py
import os
import time
import redis
from flask import Flask

def get_ip():
    return os.getenv('MYREDIS_HOST', 'localhost')

app = Flask(__name__)
cache = redis.Redis(host=get_ip(), port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World from Docker! I have been seen {} times.\n'.format(count)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# Dockerfile
FROM python:3.7-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["python", "app.py"]
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# Developer Side

# 1. Create the dependent package list
pip freeze > requirements.txt

# 2. Create an image docker.io/library/lchenlangley/count
# lchenlangey is the account at Docker Hub
docker build -t lchenlangley/count .

# 3. Push the image to Docker Hub, each organizaiton may have their own private image registry
docker login
docker push lchenlangley/count
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# Deployment on Host

# 1. Create a bridge network
docker network create asgard

# 2. Create a redis container named as redisserver
docker run -d --name redisserver --network asgard redis

# 3. Create a container for the app
# Pass redis container name to the app with an environment variable
docker run -d --network asgard -e MYREDIS_HOST=redisserver -p 8000:5000 lchenlangley/count
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# User Side
http://localhost:8000/
		</pre>
		</div>
        <div class = "subtitle">Reference</div>
		<div class = "block">
            <li><a href = "https://docs.docker.com/compose/gettingstarted/">Docker Manuals</a></li>
        </div>
	</body>
</html>
