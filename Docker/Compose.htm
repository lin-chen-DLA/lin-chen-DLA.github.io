<!DOCTYPE html>
<html>
	<head>
		<title>Docker</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Compose
		</div>
        <div class = "block">
            <li>Create multiple container app, each container should do <span>one thing</span> and do it well</li>
            <li>By default, containers run in <span>isolation</span> and don’t know anything about other processes or containers on the same machine. Use <span>networking</span> allow one container to talk to another</li>
        </div>
        <div class = "subtitle">Link</div>
        <div class = "block">
            <p style = "text-align:center;"><img src = "img/Docker_5.png" width = "40%"></p>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# Start a database
docker run -d --name db -e sourceVar=PostgreSQL training/postgres

# link container web to container db
# --link [source name]:[alias]

# source provides information to recipient with environment variables and /etc/hosts

# define three environment variables for each exposed port on source container
# [alias]_PORT_[port]_[protocol]
# WEBDB_PORT_5432_TCP_ADDR=172.17.0.82
# WEBDB_PORT_5432_TCP_PORT=543
# WEBDB_PORT_5432_TCP_PROTO=tcp

# define the URL of the source container’s first exposed port
# [alias]_PORT

# pass environment variables on source to recipient
# [alias]_ENV_[name]
docker run -d -P --name web --link db:webdb training/webapp python app.py

# test access from recipient to source
apt-get install -yqq inetutils-ping
# ping [alias]
ping webdb

# check environment variable on recipient
docker exec -it web bash
env
		</pre>
		</div>
        <div class = "subtitle">Reference</div>
		<div class = "block">
            <li><a href = "https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started">YAML Tutorial</a></li>
        </div>
    </body>
</html>
