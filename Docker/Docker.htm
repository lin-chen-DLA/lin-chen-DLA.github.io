<!DOCTYPE html>
<html>
	<head>
		<title>Docker</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Docker
		</div>
		<div class = "block">
			<li>an open-source project that automates the deployment of software applications inside containers by providing an additional layer of abstraction and automation of OS-level virtualization on Linux</li>
		</div>
		<div class = "subtitle">General Rules</div>
		<div class = "block">
			<li>Deploy applications in a sandbox (called containers) to run on the host operating system</li>
			<li>Allows users to package an application with all of its dependencies into a standardized unit for software development</li>
			<li><span>Containers</span> provide most of the isolation of virtual machines at a fraction of the computing power</li>
		</div>
		<div class = "subtitle">Commands</div>
		<div class = "block">
			<li>docker pull imageName, fetch an Docker image from Docker Registry
				<ul>
					<li>docker push [imageName:tagname], default is latest</li>
				</ul>
			</li>
			<li>docker images, show a list of all images on the local system
				<ul>
					<li>docker rmi, remove a image</li>
					<li>docker rmi $(docker images -a -q), remove all images</li>
				</ul>
			</li>
			<li>docker run imageName, the Docker client finds the image, loads up the container, runs a command in that container
				<ul>
					<li>docker run --help, show a list of all flags of run</li>
				</ul>
			</li>
		<pre class = "prettyprint linenums">
docker run busybox echo "hello from busybox" // runs a command in container busybox
		</pre>
		<pre class = "prettyprint linenums">
docker run -it busybox sh // -it, attaches to an interactive tty in the container
		</pre>
		<li>docker ps, shows all containers that are currently running
			<ul>
				<li>docker ps, show containers running</li>
				<li>docker ps -a, show all containers ran</li>
				<li>docker stop [containerName], stop a container running</li>
				<li>docker kill [contaierID], kill a container</li>
				<li>docker rm, remove a container from the local system that is not running</li>
				<li>docker rm -rm , removes the container when it exits</li>
				<li>docker rm $(docker ps -a -f status=exited -q), remove all exited containers</li>
			</ul>
		</li>
		<li>docker run -d -P --name [containerName] [imageName]
			<ul>
				<li>-d, detach the terminal</li>
				<li>-P, publish all exposed ports to random ports</li>
				<li>--name, give the container a name</li>
			</ul>
		</li>
		<li>docker port [containerName], get port</li>
		</div>
		<div class = "subtitle">Terms</div>
		<div class = "block">
			<li><span>Image,</span> the blueprints of our application which form the basis of containers</li>
			<li><span>Container,</span> created from Docker images and run the actual application</li>
			<li><span>Docker Daemon,</span> the background service running on the host that manages building, running and distributing Docker containers</li>
			<li><span>Docker Client,</span> the command line tool that allows the user to interact with the daemon</li>
			<li><span>Docker Hub,</span> a directory of all available Docker images</li>
		</div>
		<div class = "subtitle">Image Creation</div>
		<div class = "block">
			<li>Dockerfile</li>
		<pre class = "prettyprint linenums">
FROM python:3 # specify the base image

WORKDIR /usr/src/app # set a directory for the app

COPY . . # copy all the files to the container

RUN pip install --no-cache-dir -r requirements.txt # install dependencies

EXPOSE 5000 # specify is the port number that needs to be exposed

CMD ["python", "./app.py"] # command for running the application
		</pre>
			<li>.dockerignore</li>
		<pre class = "prettyprint linenums">
.git
.gitignore
README.md
LICENSE
		</pre>
			<li>Build</li>
		<pre class = "prettyprint linenums">
docker build -t yourusername/repository-name .
		</pre>
			<li>Push</li>
		<pre class = "prettyprint linenums">
docker log # log in Docker Hub
docker push [imageName] # push an image to Docker Hub
		</pre>
			<li>Tag</li>
		<pre class = "prettyprint linenums">
docker tag lchenlangley/cat lchenlangley/cat:v2.0 # create an image named lchenlangley/cat:v2.0
docker push lchenlangley/cat:v2.0 # push the image with the tag to Docker Hub
		</pre>
		</div>
		<div class = "subtitle">hello</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
print("Hello World!")
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
FROM python:3

# set a directory for the app
WORKDIR /usr/src/app

# copy all the files to the container
COPY . .

# run the command
CMD ["python", "./hello.py"]
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# build
docker build -t lchenlangley/hello .
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
docker run lchenlangley/hello
		</pre>
		</div>
		<div class = "subtitle">Images</div>
		<div class = "block">
			<li>docker run -it ubuntu bash, Ubuntu</li>
			<li>docker run hello-world, hello-world</li>
			<li>docker run -d -p 80:80 docker/getting-started, local tutorial</a></li>
		</div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
			<li><a href = "https://hub.docker.com/search?q=&type=image">Docker Registry</a></li>
			<li><a href = "https://docker-curriculum.com/">Tutorial</a></li>
		</div>
	</body>
</html>
