<!DOCTYPE html>
<html>
	<head>
		<title>Docker</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Docker Commands
		</div>
        <div class = "subtitle">Image</div>
        <div class = "block">
			<li>contains the container's filesystem, it must contain everything needed to run an application - all dependencies, configuration, scripts, binaries, etc.</li>
            <li>Show Images</li>
		<pre class = "prettyprint linenums">
# show a list of all images on the local system
docker images
docker image ls
        </pre>
        <li>Remove Images</li>
		<pre class = "prettyprint linenums">
# remove an image
docker image rm [imageName]
docker rmi [imageName]

# remove all images
docker rmi $(docker images -a -q)
        </pre>
        <li>Pull Image</li>
		<pre class = "prettyprint linenums">
# fetch an Docker image from Docker Registry
docker pull [imageName]
docker image pull [imageName]
        </pre>
        <li>Create Image</li>
		<pre class = "prettyprint linenums">
# docker build -t [imageName:tagName] [sourceCodeDir]
docker build -t [imageName] .
docker image build -t [imageName] .
        </pre>
        <li>Push Image</li>
		<pre class = "prettyprint linenums">
docker push [imageName:tagname] # push the image with the tag to Docker Hub, default is latest
docker image push [imageName:tagName]
        </pre>
        <li>Save Image</li>
		<pre class = "prettyprint linenums">
# save an image as a tar file
docker save -o name.tar [imageName]
docker image save -o name.tar [imageName]
        </pre>
        <li>Load Image</li>
		<pre class = "prettyprint linenums">
# load an image from a tar file
docker load -i name.tar
docker image load -i name.tar
        </pre>
        <li>Inspect Image</li>
		<pre class = "prettyprint linenums">
# display detailed image information
docker inspect [imageName]
docker image inspect [imageName]
        </pre>
        <li>Import Image</li>
		<pre class = "prettyprint linenums">
docker image import [name.tar] [imageName]
docker import [name.tar] [imageName]
        </pre>
        </div>
        <div class = "subtitle">Container</div>
        <div class = "block">
            <li>Run an image</li>
		<pre class = "prettyprint linenums">
# Docker client finds the image, loads up in a new container, runs a command in that container
# Default command is defined in Dockerfile
docker run [imageName:tag] [command]

# -it, attaches to an interactive tty in the container, can be used to explore the image system
docker run -it [imageName] sh # access the Linux system of a container

docker run busybox echo "hello from busybox" runs a command in container busybox
docker run -it busybox sh

# -d, detach the terminal, running on backend
# -P, publish all exposed ports to random ports
# -p [docker_host_port]:[container_port], map port number
# --name, give the container a name
# --network, configure network
# -e, environment variables
docker run -d -P --name [containerName] [imageName]
docker run -p 80:8080 [imageName]

docker container run [imageName]
        </pre>   
            <li>Inspect Container</li>
		<pre class = "prettyprint linenums">
docker inspect [containerName]
docker container inspect [containerName]
        </pre> 
            <li>Show Containers</li>
		<pre class = "prettyprint linenums">
# show containers running
docker container ls
docker ps

# show containers exit
docker container ls -a
docker ps -a
        </pre>
        <li>Copy</li>
		<pre class = "prettyprint linenums">
docker cp [containerID/containerName]:src_path local_dest_path # copy a container file to local

docker cp local_src_path [containerID/containerName]:container_dest_path # copy a local file to a container
        </pre>
        <li>Access a Container</li>
		<pre class = "prettyprint linenums">
docker attach [containerName]

or

docker exec -it [containerName] sh
docker container exec -it [containerName] sh
        </pre>
        <li>Convert Container to Image</li>
		<pre class = "prettyprint linenums">
docker commit [containerID/containerName] [imageName] # create a image from a container
        </pre>
        <li>Show Containers</li>
		<pre class = "prettyprint linenums">
docker stop [containerName] # stop a container running
docker kill [contaierID] # kill a running container</li>
        </pre>
        <li>Start Container</li>
		<pre class = "prettyprint linenums">
docker start -ia [containerName]
docker container start [containerName]
        </pre>
        <li>Restart Container</li>
		<pre class = "prettyprint linenums">
docker restart [containerName]
docker container restart [containerName]
        </pre>
        <li>Stop Container</li>
		<pre class = "prettyprint linenums">
docker stop [containerName]
docker container stop [containerName]
        </pre>
        <li>Remove Container</li>
		<pre class = "prettyprint linenums">
docker rm [containerID/containerName] # remove a container that is not running
docker container rm [containerName]
docker rm $(docker ps -a -f status=exited -q), remove all exited containers
        </pre>
        <li>Display Container Log</li>
		<pre class = "prettyprint linenums">
docker container logs [containerName]
        </pre>
        <li>Export Container</li>
		<pre class = "prettyprint linenums">
docker container export -o name.tar [contianerName]
        </pre>
		<pre class = "prettyprint linenums">
docker create --name [containerName ]-it [imageName] [command] # create a container
docker start -ia [containerName] # start the container
        </pre>
        </div>
        <div class = "subtitle">Network</div>
        <div class = "block">
            <li>List networks
		<pre class = "prettyprint linenums">
docker network ls
        </pre>
        <li>Inspect network</li>
		<pre class = "prettyprint linenums">
docker network inspect [networkName]
        </pre>
        <li>Create network</li>
		<pre class = "prettyprint linenums">
docker network create -d [driverName] [networkName] # default driver is bridge
        </pre>
        <li>Connect network</li>
		<pre class = "prettyprint linenums">
docker run -itd --network=[networkName] [image] # start a container and connect it to a network

# ip, specify the IP address a container on a network
docker network connect --ip [ip] [networkName] [containerName] # connect a running container to a network
        </pre>
        <li>Disconnect network</li>
		<pre class = "prettyprint linenums">
docker network disconnect [networkName] [containerName] # disconnect a container from a network
        </pre>
        <li>Remove network</li>
		<pre class = "prettyprint linenums">
docker network rm [networkName], remove a network

docker network prune, remove all networks
        </pre>
        </div>
        <div class = "subtitle">Volume</div>
        <div class = "block">
            <li>Create Volume
		<pre class = "prettyprint linenums">
docker volume create [volumeName]
        </pre>
            <li>List Volumes
		<pre class = "prettyprint linenums">
docker volume ls
        </pre>
            <li>Inspect Volume
		<pre class = "prettyprint linenums">
docker volume inspect [volumeName]
        </pre>
            <li>Remove Volume
		<pre class = "prettyprint linenums">
docker volume rm [volumeName]
        </pre>
        </div>
        <div class = "subtitle">Docker Registry</div>
        <div class = "block">
            <li>Docker Hub</li>
		<pre class = "prettyprint linenums">
docker login # log in Docker Hub
        </pre>
        </div>
        <div class = "subtitle">Others</div>
        <div class = "block">
                <li>docker [command] --help, get the help information of a command</li>
		</div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
            <li><a href = "https://www.educba.com/software-development/software-development-tutorials/docker-tutorial/">Docker Tutorial</a></li>
            <li><a href = "https://docs.docker.com/engine/reference/run/">Docker CLI</a></li>
		</div>
	</body>
</html>
