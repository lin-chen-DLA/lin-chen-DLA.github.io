<!DOCTYPE html>
<html>
	<head>
		<title>C++</title>
		<link rel="stylesheet" href="css/atelier-sulphurpool-light.css" type="text/css">
		<script src="js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
		</style>
	</head>
	<body>
		<div class = "title">
			set
		</div>
		<div class = "block">
			<ul>
				<li>Each value must be unique</li>
				<li>Elements are always const</li>
				<li>Can be inserted or removed</li>
				<li>Sorted by a specific order indicated by comparison object</li>
				<li>Implemented as binary search trees</li>
			</ul>
		</div>
		<div class = "subtitle">Initialization</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
#include &lt;iostream&gt;
#include &lt;set&gt;

template &lt;class T&gt;
void display(T it, T end)
{
	while(it != end)
	{
		std::cout&lt;&lt;*it&lt;&lt;" ";
		std::advance(it, 1);
	}
}

int main(int argc, char *argv[])
{
	int array[] = {1, 2, 3, 4, 4};//contains repeat elements
	std::set&lt;int&gt; s(array, array+5);//1 2 3 4

	std::cout&lt;&lt;"Size: "&lt;&lt;s.size()&lt;&lt;std::endl;
	std::cout&lt;&lt;"Max_size: "&lt;&lt;s.max_size()&lt;&lt;std::endl;

	display(s.begin(), s.end());

	return 0;
}
			</pre>
		</div>
		<div class = "subtitle">Operations</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
#include &lt;iostream&gt;
#include &lt;set&gt;

template &lt;class T&gt;
void display(T it, T end)
{
	while(it != end)
	{
		std::cout&lt;&lt;*it&lt;&lt;" ";
		std::advance(it, 1);
	}
}

int main(int argc, char *argv[])
{
	std::set&lt;int&gt; s = {1, 2, 3, 4};

	//insert
	s.insert(5);//1 2 3 4 5
	auto it = s.begin();
	std::advance(it, 1);
	s.insert(it, 10);//max efficiency inserting, 1 2 3 4 5 10

	//erase
	s.erase(5);//1 2 3 4 10

	//find
	auto fit = s.find(10);
	std::cout&lt;&lt;*fit&lt;&lt;std::endl;

	//count
	s.insert(10);//not insert a repeat element
	std::cout&lt;&lt;s.count(10)&lt;&lt;std::endl;//1

	//lower_bound and upper_bound
	auto l = s.lower_bound(2);
	auto u = s.upper_bound(8);
	std::cout&lt;&lt;*l&lt;&lt;std::endl;
	std::cout&lt;&lt;*u&lt;&lt;std::endl;

	display(s.begin(), s.end());

	return 0;
}
			</pre>
		</div>
		<div class = "subtitle">Set Containing Objects</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
//Rectangle.h
#ifndef RECTANGLE_H
#define RECTANGLE_H
class Rectangle
{
	private:
		double width;
		double length;
	public:
		//constructor
		Rectangle(){}
		Rectangle(double w, double l):width(w), length(l){}

		//accessor
		double getWidth() const;
		double getLength() const;
		double getArea() const;

		//mutator
		void setWidth(double w);
		void setLength(double l);

		//operator
		bool operator&lt;(const Rectangle &right) const
		{
			if(getArea() &lt; right.getArea())
				return true;
			else
				return false;
		}
};
#endif

//Rectangle.cpp
#include "Rectangle.h"

double Rectangle::getWidth() const
{
	return width;
}

double Rectangle::getLength() const
{
	return length;
}

double Rectangle::getArea() const
{
	return width*length;
}

void Rectangle::setWidth(double w)
{
	width = w;
}

void Rectangle::setLength(double l)
{
	length = l;
}

//main.cpp
#include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;vector&gt;
#include &lt;typeinfo&gt;
#include &lt;algorithm&gt;
#include "Rectangle.h"

void display(const std::set&lt;Rectangle&gt; &c)
{
	for(auto it = c.begin(); it != c.end(); ++it)
	{
		std::cout&lt;&lt;it-&gt;getArea()&lt;&lt;std::endl;
	}
}

int main(int argc, char *argv[])
{
	std::set&lt;Rectangle&gt; s;

	//insert
	Rectangle r1(1, 2);
	Rectangle r2(2, 3);
	s.insert(r1);
	s.insert(r2);
	display(s);

	//find
	Rectangle r3(1, 2);
	auto it = s.find(r3);
	std::cout&lt;&lt;it-&gt;getArea()&lt;&lt;std::endl;

	return 0;
}
			</pre>
		</div>
		<div class = "block">
			<ul>
				<li>Insert objects in set, overload <span style = "color:red">operator &lt;</span></li>
				<li>sort elements by operator &lt;</li>
				<li>find element by checking both a &lt; b and b &lt; a are false</li>
			</ul>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
//Rectangle.h
#ifndef RECTANGLE_H
#define RECTANGLE_H
class Rectangle
{
	private:
		double width;
		double length;
	public:
		//constructor
		Rectangle(double w, double l):width(w), length(l){}

		//accessor
		double getWidth() const;
		double getLength() const;
		double getArea() const;

		//mutator
		void setWidth(double w);
		void setLength(double l);
};
#endif

//Rectangle.cpp
#include "Rectangle.h"

double Rectangle::getWidth() const
{
	return width;
}

double Rectangle::getLength() const
{
	return length;
}

double Rectangle::getArea() const
{
	return width*length;
}

void Rectangle::setWidth(double w)
{
	width = w;
}

void Rectangle::setLength(double l)
{
	length = l;
}

//main.cpp
#include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;vector&gt;
#include &lt;typeinfo&gt;
#include &lt;algorithm&gt;
#include "Rectangle.h"

struct comp{
	bool operator()(const Rectangle & a, const Rectangle &b) const
	{
		return (a.getArea() &lt; b.getArea());
	}
};

void display(const std::set&lt;Rectangle, comp&gt; &c)
{
	for(auto it = c.begin(); it != c.end(); ++it)
	{
		std::cout&lt;&lt;it-&gt;getArea()&lt;&lt;std::endl;
	}
}

int main(int argc, char *argv[])
{
	std::set&lt;Rectangle, comp&gt; s;
	Rectangle r1(1, 2);
	Rectangle r2(2, 3);
	s.insert(r1);
	s.insert(r2);
	display(s);

	Rectangle r3(1, 2);
	auto it = s.find(r3);
	std::cout&lt;&lt;it-&gt;getArea()&lt;&lt;std::endl;

	return 0;
}
		</pre>
	</div>
	<div class = "block">
		<ul>
			<li>Insert objects in set, use <span style = "color:red">compare struct operator()</span></li>
		</ul>
	</div>
	<div class = "block">
	<pre class = "prettyprint linenums">
//Rectangle.h
#ifndef RECTANGLE_H
#define RECTANGLE_H
class Rectangle
{
	private:
		double width;
		double length;
	public:
		//constructor
		Rectangle(double w, double l):width(w), length(l){}

		//accessor
		double getWidth() const;
		double getLength() const;
		double getArea() const;

		//mutator
		void setWidth(double w);
		void setLength(double l);
};
#endif

//Rectangle.cpp
#include "Rectangle.h"

double Rectangle::getWidth() const
{
	return width;
}

double Rectangle::getLength() const
{
	return length;
}

double Rectangle::getArea() const
{
	return width*length;
}

void Rectangle::setWidth(double w)
{
	width = w;
}

void Rectangle::setLength(double l)
{
	length = l;
}

//main.cpp
#include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;vector&gt;
#include &lt;typeinfo&gt;
#include &lt;algorithm&gt;
#include "Rectangle.h"

bool cmp(const Rectangle &a, const Rectangle &b)
{
	return (a.getArea() &lt; b.getArea());
}

void display(const std::set&lt;Rectangle, bool(*)(const Rectangle &, const Rectangle &)&gt; c)
{
	for(auto it = c.begin(); it != c.end(); ++it)
	{
		std::cout&lt;&lt;it-&gt;getArea()&lt;&lt;std::endl;
	}
}

int main(int argc, char *argv[])
{
	std::set&lt;Rectangle, bool(*)(const Rectangle &, const Rectangle &)&gt; s(cmp);
	Rectangle r1(1, 2);
	Rectangle r2(2, 3);
	s.insert(r1);
	s.insert(r2);
	display(s);

	Rectangle r3(1, 2);
	auto it = s.find(r3);
	std::cout&lt;&lt;it-&gt;getArea()&lt;&lt;std::endl;

	return 0;
}
	</pre>
</div>
	<div class = "block">
		<ul>
			<li>Insert objects in set, use <span style = "color:red">comparison function</span></li>
		</ul>
	</div>
	<div class = "block">
	<pre class = "prettyprint linenums">
//Rectangle.h
#ifndef RECTANGLE_H
#define RECTANGLE_H
class Rectangle
{
	private:
		double width;
		double length;
	public:
		//constructor
		Rectangle(){}
		Rectangle(double w, double l):width(w), length(l){}

		//accessor
		double getWidth() const;
		double getLength() const;
		double getArea() const;

		//mutator
		void setWidth(double w);
		void setLength(double l);

		//operator
		bool operator&lt;(const Rectangle &right) const
		{
			if(getArea() &lt; right.getArea())
				return true;
			else
				return false;
		}
};
#endif

//Rectangle.cpp
#include "Rectangle.h"

double Rectangle::getWidth() const
{
	return width;
}

double Rectangle::getLength() const
{
	return length;
}

double Rectangle::getArea() const
{
	return width*length;
}

void Rectangle::setWidth(double w)
{
	width = w;
}

void Rectangle::setLength(double l)
{
	length = l;
}

//main.cpp
#include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;vector&gt;
#include &lt;typeinfo&gt;
#include &lt;algorithm&gt;
#include "Rectangle.h"

auto comp = [](const Rectangle &a, const Rectangle &b) {return (a&lt;b);};

void display(const std::set&lt;Rectangle, decltype(comp)&gt; &c)
{
	for(auto it = c.begin(); it != c.end(); ++it)
	{
		std::cout&lt;&lt;it-&gt;getArea()&lt;&lt;std::endl;
	}
}

int main(int argc, char *argv[])
{
	std::set&lt;Rectangle, decltype(comp)&gt; s(comp);
	Rectangle r1(1, 2);
	Rectangle r2(2, 3);
	s.insert(r1);
	s.insert(r2);
	display(s);

	Rectangle r3(1, 2);
	auto it = s.find(r3);
	std::cout&lt;&lt;it-&gt;getArea()&lt;&lt;std::endl;

	return 0;
}
	</pre>
</div>
<div class = "block">
		<ul>
			<li>Insert objects in set, use <span style = "color:red">lambda</span></li>
		</ul>
	</div>
	<div class = "subtitle">Reference</div>
	<div class = "block">
		<ul>
			<li><a href = "http://fusharblog.com/3-ways-to-define-comparison-functions-in-cpp/">3 Ways to Define Comparison Functions in C++</a></li>
			<li><a href = "http://www.cplusplus.com/reference/set/set/">cplusplus.com</a></li>
		</ul>
	</div>
	</body>
</html>
