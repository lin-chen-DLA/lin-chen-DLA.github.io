<!DOCTYPE html>
<html>
	<head>
		<title>C++</title>
		<link rel="stylesheet" href="css/atelier-sulphurpool-light.css" type="text/css">
		<script src="js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
		</style>
	</head>
	<body>
		<div class = "title">
			list
		</div>
		<div class = "block">
			<ul>
				<li>List containers are implemented as doubly-linked lists</li>
			</ul>
		</div>
		<div class = "subtitle">Initialization</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
#include &lt;iostream&gt;
#include &lt;list&gt;

template &lt;class T&gt;
void display(T it, T end)
{
	for(; it != end; ++it)
		std::cout&lt;&lt;*it&lt;&lt;" ";
	std::cout&lt;&lt;std::endl;
}

int main(int argc, char *argv[])
{
	std::list&lt;int&gt; l = {1, 2, 3, 4};

	std::list&lt;int&gt; l2(10, 100);

	std::list&lt;int&gt; l3(l2.begin(), l2.end());

	int array[] = {1, 2, 3, 4};
	std::list&lt;int&gt; l4(array, array+sizeof(array)/sizeof(int));
	display(l4.begin(), l4.end());

	return 0;
}
			</pre>
		</div>
		<div class = "subtitle">Retrieve List</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
#include &lt;iostream&gt;
#include &lt;list&gt;

int main(int argc, char *argv[])
{
	std::list&lt;int&gt; l = {1, 2, 3, 4};

	//front
	l.front() *= 10;
	std::cout&lt;&lt;l.front()&lt;&lt;std::endl;//10

	//back
	l.back() *= 10;
	std::cout&lt;&lt;l.back()&lt;&lt;std::endl;//40

	//advance
	auto it = l.begin();
	std::advance(it, 1);
	*it *= 10;
	std::cout&lt;&lt;*it&lt;&lt;std::endl;//20

	//begin()
	//std::cout&lt;&lt;*(l.begin()[1])&lt;&lt;std::endl;//error, the memory for list is not contiguous

	return 0;
}
			</pre>
		</div>
		<div class = "subtitle">Insert and Delete</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
#include &lt;iostream&gt;
#include &lt;list&gt;

template &lt;class T&gt;
void display(T it, T end)
{
	while(it != end)
	{
		std::cout&lt;&lt;*it&lt;&lt;" ";
		std::advance(it, 1);
	}
	std::cout&lt;&lt;std::endl;
}

int main(int argc, char *argv[])
{
	std::list&lt;int&gt; l = {1, 2, 3, 4};

	//push_front
	l.push_front(10);
	//push_back
	l.push_back(100);

	//pop_front
	l.pop_front();
	//pop_back
	l.pop_back();

	//insert
	auto it = l.begin();
	std::advance(it, 1);
	l.insert(it, 10);
	display(l.begin(), l.end());//1 10 2 3 4

	//erase
	it = l.begin();
	std::advance(it, 2);
	l.erase(it);
	display(l.begin(), l.end());//1 10 3 4

	//resize
	l.resize(10);//1 10 3 4 0 0 0 0 0 0

	//clear
	l.clear();

	return 0;
}
			</pre>
		</div>
		<div class = "subtitle">Size</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
#include &lt;iostream&gt;
#include &lt;list&gt;

int main(int argc, char *argv[])
{
	std::list&lt;int&gt; l = {1, 2, 3, 4};

	l.resize(10);

	std::cout&lt;&lt;"Size: "&lt;&lt;l.size()&lt;&lt;std::endl;//10
	std::cout&lt;&lt;"Max_size: "&lt;&lt;l.max_size()&lt;&lt;std::endl;

	return 0;
}
			</pre>
		</div>
		<div class = "subtitle">Operations</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
#include &lt;iostream&gt;
#include &lt;list&gt;

template &lt;class T&gt;
void display(T it, T end)
{
	while(it != end)
	{
		std::cout&lt;&lt;*it&lt;&lt;" ";
		std::advance(it, 1);
	}
	std::cout&lt;&lt;std::endl;
}

int main(int argc, char *argv[])
{
	std::list&lt;int&gt; l1 = {1, 2, 3, 4};
	std::list&lt;int&gt; l2 = {10, 20, 30, 40};

	//splice
	auto it = l1.begin();
	std::advance(it, 1);
	l1.splice(it, l2);
	display(l1.begin(), l1.end());//1 10 20 30 40 2 3 4
	display(l2.begin(), l2.end());//l2 is empty

	//remove
	l1.remove(2);
	display(l1.begin(), l1.end());//1 10 20 30 40 3 4

	//remove_if
	l1.remove_if([](int n){if(n%2 == 1) return n;});
	display(l1.begin(), l1.end());//10 20 30 40 4

	//sort
	std::list&lt;int&gt; l3 = {8, 1, 5, 4, 3, 5, 1};
	l3.sort();
	display(l3.begin(), l3.end());//1 1 3 4 5 5 8

	//unique
	l3.unique();
	display(l3.begin(), l3.end());//1 3 4 5 8

	//merge
	std::list&lt;int&gt; l4 = {1, 2, 3, 4};
	std::cout&lt;&lt;"Merge: "&lt;&lt;std::endl;
	//l4.merge(l3);
	//l4.merge(l3, [](int a, int b) {return (a &lt; b);});//return true if the first argument is less than the second
	l4.merge(l3, [](int a, int b) {if (a &lt; b) return true;else return false;});
	display(l4.begin(), l4.end());//1 1 2 3 3 4 4 5 8
	display(l3.begin(), l3.end());//l3 is empty

	//sort
	std::list&lt;int&gt; l5 = {4, 3, 2, 1};
	//l5.sort();
	l5.sort([](int a, int b){return (a&lt;b);});
	display(l5.begin(), l5.end());//1 2 3 4

	//reverse
	l5.reverse();
	display(l5.begin(), l5.end());// 4 3 2 1

	return 0;
}
			</pre>
		</div>
		<div class = "subtitle">Bubble Sort</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;iterator&gt;

template &lt;class T&gt;
void display(T c)
{
	for(auto e : c)
		std::cout&lt;&lt;e&lt;&lt;" ";
	std::cout&lt;&lt;std::endl;
}

template &lt;class T&gt;
void sort(T c)
{
	for(auto i = std::prev(c.end()); i != std::prev(c.begin()); --i)
	{
		for(auto j = c.begin(); j != i; ++j)
			if(*j &gt; *std::next(j))
			{
				std::swap(*j, *std::next(j));
			}
		display(c);
	}
}

int main(int argc, char *argv[])
{
	std::list&lt;int&gt; l = {5, 4, 3, 2, 1};
	sort(l);//bubble sort

	return 0;
}
			</pre>
		</div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
			<ul>
				<li><a href = "http://www.cplusplus.com/reference/list/list/">cplusplus.com</a></li>
			</ul>
		</div>
	</body>
</html>
