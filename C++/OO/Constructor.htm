<!DOCTYPE html>
<html>
	<head>
		<title>C++</title>
		<link rel="stylesheet" href="css/atelier-sulphurpool-light.css" type="text/css">
		<script src="js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
		</style>
	</head>
	<body>
		<div class = "title">
			Constructor and Destructor
		</div>

		<div class = "subtitle">Constructor</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
//Rectangle.h
#ifndef RECTANGLE_H
#define RECTANGLE_H
class Rectangle
{
	private:
		double width;
		double length;
	public:
		//constructor
		Rectangle(double w, double l);

		//accessor
		double getWidth() const;
		double getLength() const;
		double getArea() const;

		//mutator
		void setWidth(double w);
		void setLength(double l);
};
#endif
			</pre>
			<pre class = "prettyprint linenums">
//Rectangle.cpp
#include "Rectangle.h"

Rectangle::Rectangle(double w, double l):width(w), length(l){}

double Rectangle::getWidth() const
{
	return width;
}

double Rectangle::getLength() const
{
	return length;
}

double Rectangle::getArea() const
{
	return width*length;
}

void Rectangle::setWidth(double w)
{
	width = w;
}

void Rectangle::setLength(double l)
{
	length = l;
}
			</pre>
			<pre class = "prettyprint linenums">
//main.cpp
#include &lt;iostream&gt;
#include "Rectangle.h"

int main(int argc, char *argv[])
{
	Rectangle *r;
	r = new Rectangle(5, 10);

	std::cout&lt;&lt;"Area: "&lt;&lt;r-&gt;getArea()&lt;&lt;std::endl;

	return 0;
}
			</pre>
		</div>
		<div class = "block">
			<ul>
				<li>No return type</li>
				<li>a constructor's purpose is to initialize an object's attributes</li>
				<li>default constructor is a constructor that takes no arguments, if a class with no constructor, compiler will automatically write a default constructor that does nothing</li>
				<li>once a constructor is defined, the default constructor will not be generated by compiler</li>
				<li><span style = "color:red">a constructor with all default arguments is the default constructor</span></li>
			</ul>
		</div>
		<div class = "subtitle">Destructor</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
//V.h
#ifndef V_H
#define V_H
class V
{
	private:
		int size;
		double *array;
	public:
		V(int s);
		V(double *a, int s);
		int getSize() const;
		double *getArray() const;
		void display() const;
		~V();
};
#endif

//V.cpp
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include "V.h"
V::V(int s)
{
	std::cout&lt;&lt;"Constructor V(s) ..."&lt;&lt;std::endl;
	size = s;
	array = new double[size];
	for(int i = 0; i &lt; size; i++)
		array[i] = rand()%100;
}

V::V(double *a, int s)
{
	std::cout&lt;&lt;"Constructor V(a, s) ..."&lt;&lt;std::endl;
	size = s;
	array = a;
}

int V::getSize() const
{
	return size;
}

double *V::getArray() const
{
	return array;
}

void V::display() const
{
	for(int i = 0; i &lt; size; i++)
		std::cout&lt;&lt;array[i]&lt;&lt;" ";
	std::cout&lt;&lt;std::endl;
}
		
V::~V()
{
	std::cout&lt;&lt;"Destructor "&lt;&lt;size&lt;&lt;" ..."&lt;&lt;std::endl;
	size = 0;
	delete [] array;
	//array = 0;
}

//main.cpp
#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include "V.h"

int main(int argc, char *argv[])
{
	V v(5);
	v.display();

	V *v2 = new V(10);
	v2-&gt;display();
	delete v2;

	double *array = new double [15];
	for(int i = 0; i &lt; 15; i++)
		array[i] = rand()%100;
	V *v3 = new V(array, 15);
	v3-&gt;display();
	delete v3;

	return 0;
}
			</pre>
		</div>
		<div class = "block">
			<ul>
				<li>destructors are automatically called when an object is destroyed</li>
				<li>destructors have no return type</li>
				<li>destructors cannot accept arguments, so they never have a parameter list</li>
			</ul>
		</div>
	</body>
</html>
