<!DOCTYPE html>
<html>
	<head>
		<title>Python</title>
		<link rel="stylesheet" href="css/atelier-sulphurpool-light.css" type="text/css">
		<script src="js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
		</style>
	</head>
	<body>
		<div class = "title">
			Decorator
		</div>

		<div class = "block">
			<ul>
				A decorator in Python is a callable Python object that is used to modify a function, method or class definition. The original object, the one which is going to be modified, is passed to a decorator as an argument. The decorator returns a modified object, e.g. a modified function, which is bound to the name used in the definition.
			</ul>
		</div>

		<div class = "subtitle">Function Decorator</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#!/usr/bin/python

def func_decorator(func):
    def wrapper(x):
        if x == 0:
            raise Exception('Denominator is zero ...');
        return func(x);
    return wrapper;

@func_decorator
def inverse(x):
    return 1.0/x;

try:
    print inverse(10);
    print inverse(0);
except Exception, e:
    print e
		</pre>
		</div>
		<div class = "subtitle">Memoization</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
def memoize(f):
    memo = {}
    def helper(x):
        if x not in memo:            
            memo[x] = f(x)
        return memo[x]
    return helper
    

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

fib = memoize(fib)

print(fib(40))
		</pre>
		</div>

		<div class = "subtitle">Class Decorator</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
class Fibonacci:
    def __init__(self):
        self.cache = {}
    def __call__(self, n):
        if n not in self.cache:
            if n == 0:
                self.cache[0] = 0
            elif n == 1:
                self.cache[1] = 1
            else:
                self.cache[n] = self.__call__(n-1) + self.__call__(n-2)
        return self.cache[n]

fib = Fibonacci()

for i in range(15):
    print(fib(i), end=", ")
		</pre>
		</div>

		<div class = "subtitle">Reference</div>
		<div class = "block">
			<ul>
				<li><a href = "http://www.python-course.eu/python3_decorators.php">Decorator</a> at Python Course</li>
				<li><a href = "http://www.python-course.eu/python3_memoization.php">Memoization</a> at Python Course</li>
			</ul>
		</div>
	</body>
</html>
