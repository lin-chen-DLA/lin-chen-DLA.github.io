<!DOCTYPE html>
<html>
	<head>
		<title>Linux</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red}
		</style>
	</head>
	<body>
		<div class = "title">
			Regular Expression
		</div>
		<div class = "block">
			A regular expression is a set of characters that specify a pattern, are used when you want to search for specify lines of text containing a particular pattern
			<li><a href = "sample.txt">Sample.txt</a></li>
		</div>
		<div class = "subtitle">Basic regular expression</div>
		<div class = "block">
			<li>vim, sed, grep, more</li>
			<li><span>Anchors</span> are used to specify the position of the pattern in relation to a line of text
				<ul>
					<li>^ - matches the beginning of the line
						<ul>
			<pre class = "prettyprint linenums">
^A, "A" at the beginning of a line
			</pre>
			<li>The "^" is only an anchor if it is the first character in a regular expression</li>
						</ul>
					</li>
					<li>$ - matches the end of the line
						<ul>
			<pre class = "prettyprint linenums">
A$, "A" at the end of a line
			</pre>
			<li>The "$" is only an anchor if it is the last character</li>
						</ul>
					</li>
					<li>If you need to match a "^" at the beginning of the line, or a "$" at the end of a line, you must <span>escape</span> the special characters with a backslash</li>
					<li>\&lt; and \&gt;, represent the start and end of a word</li>
				</ul>
			</li>
			<li><span>Character Sets</span> match one or more characters in a single position
				<ul>
			<li>. (dot) - a single character</li>
			<li>Specifying a Range of Characters with [...]
				<ul>
					<li>[0-9], a single digit</li>
					<li>[a-zA-Z], a single character</li>
					<li>[^agd] - the character is not one of those included within the square brackets</li>
					<li>[0-9-z], any number, or any character between "9" and "z"</li>
					<li>[0-9\-a\]], any number, or a "-", a "a", or a "]"</li>
				</ul>
			</li>
			<li>Remember pattern
				<ul>
			<li>\( and \), allows us to remember a pattern, recall the remembered pattern with "\" followed by a single digit
				<ul>
			<pre class = "prettyprint linenums">
\([a-z]\)\([a-z]\)[a-z]\2\1, match a 5 letter palindrome
			</pre>
				</ul>
			</li>
				</ul>
			</li>
				</ul>
			</li>
			<li><span>Modifiers</span> specify how many times the previous character set is repeated
				<ul>
			<li>* - the preceding character matches 0 or more times</li>
			<li>\{n,m\} - the preceding character matches at least n times and not more than m times, any numbers between 0 and 255 can be used. The second number may be omitted, which removes the upper limit</li>
			<li>modifiers like "*" and "\{1,5\}" only act as modifiers if they follow a character set
				<ul>
			<pre class = "prettyprint linenums">
^*, any line starting with an asterisk
\{4,8\}, any line starting with "{4,8}"
			</pre>
				</ul>
			</li>
				</ul>
			</li>
		</div>
		<div class = "subtitle">Extended regular expression</div>
		<div class = "block">
			<li>awk, egrep</li>
			<li>( | ), match a choice of patterns
				<ul>
			<pre class = "prettyprint linenums">
'^(From|Subject)',  "^[FS][ru][ob][mj]e*c*t*" with basic regular expression
			</pre>
				</ul>
			</li>
			<li>? - the preceding character matches 0 or 1 times only</li>
			<li>+ - the preceding character matches 1 or more times</li>
			<li>\w, matches word characters</li>
			<li>\W, matches nonword characters</li>
		</div>
		<div class = "subtitle">POSIX character sets</div>
		<div class = "block">
			<li>\s, whitespace</li>
			<li>\S, nonwhitespace</li>
			<li>\d, digit</li>
			<li>\D, nondigit</li>
			<li>\A, beginning of a string</li>
			<li>\b, word boundary</li>
			<li>\B, nonword boundary</li>
			<li>[[:alnum:], alphanumeric</li>
			<li>[:cntrl:], control character</li>
			<li>[:lower:], lower case character</li>
			<li>[:space:], whitespace</li>
			<li>[:alpha:], alphabetic</li>
			<li>[:digit:], digit</li>
			<li>[:print:], printable character</li>
			<li>[:upper:], upper Case Character</li>
			<li>[:blank:], whitespace, tabs, etc.</li>
			<li>[:graph:], printable and visible characters</li>
			<li>[:punct:], punctuation</li>
			<li>[:xdigit:], extended Digit</li>
			<pre class = "prettyprint linenums">
grep "[[:digit:]]" sample.txt
			</pre>
		</div>
		<div class = "subtitle" id = "awk">awk</div>
		<div class = "block">
			<li><span>pattern {action}</span></li>
			<li>AWK is line oriented</li>
			<li>The default pattern is something that matches every line</li>
			<pre class = "prettyprint linenums">
awk '/Fred/ {print $3}' sample.txt
			</pre>
		</div>
		<div class = "block">
			<li><span>BEGIN</span>, specify actions to be taken before any lines are read</li>
			<li><span>END</span>, specify actions to be taken after the last line is read</li>
			<pre class = "prettyprint linenums">
BEGIN { print "START" }
      { print         }
END   { print "STOP"  }
			</pre>
		</div>
		<div class = "block">
			<table border>
				<tr><td>awk Variable</td><td>Meaning</td></tr>
				<tr><td>$0</td><td>Whole line</td></tr>
				<tr><td>$1</td><td>The first field of the input line</td></tr>
				<tr><td>FILENAME</td><td>Name of current input file</td></tr>
				<tr><td>RS</td><td>Input record separator character</td></tr>
				<tr><td>OFS</td><td>Output field separator string</td></tr>
				<tr><td>ORS</td><td>Output record separator string</td></tr>
				<tr><td>NF</td><td>Number of fields in input record</td></tr>
				<tr><td>NR</td><td>Number of input record</td></tr>
				<tr><td>OFMT</td><td>Output format of number</td></tr>
				<tr><td>FS</td><td>Field separator character</td></tr>
			</table>
			<pre class = "prettyprint linenums">
awk '{print "# of field: " NF " # of records: " NR}' sample.txt
			</pre>
		</div>
		<div class = "block">
			<span>Commands</span>
			<ul>
				<li>if ( conditional ) statement [ else statement ]</li>
				<li>while ( conditional ) statement</li>
				<li>for ( expression ; conditional ; expression ) statement</li>
				<li>for ( variable in array ) statement</li>
				<li>break</li>
				<li>continue</li>
				<li>{ [ statement ] ...}</li>
				<li>variable=expression</li>
				<li>print [ expression-list ] [ &gt; expression ]</li>
				<li>printf format [ , expression-list ] [ &gt; expression ]</li>
				<li>next</li> 
				<li>exit</li>
			</ul>
		</div>
		<div class = "block">
			<span>Arithmetic</span>
			<pre class = "prettyprint linenums">
awk '{print $3, $3*10}' sample.txt
			</pre>
			<pre class = "prettyprint linenums">
awk '{a=$3; b=$3*10; print a, b}' sample.txt
			</pre>
			<pre class = "prettyprint linenums">
awk '{a=$3; total=total+a; print "Total:", $3, total}' sample.txt
			</pre>
		</div>
		<div class = "block">
			<span>Regular expression</span>
			<li>~, match</li>
			<li>!~, not match</li>
			<pre class = "prettyprint linenums">
# f.awk
{
	if ($1 ~ /Fred/)
		print $1, $3
	else
		print $0
}

awk -f f.awk sample.txt
			</pre>
		</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
# a.awk
/Susy/ {print $1, $3}

awk -f a.awk sample.txt, implement awk command from awk script
			</pre>
			<pre class = "prettyprint linenums">
# b.awk
BEGIN {
	print "--------------------------"
	print "-------Sample.txt---------"
	print "--------------------------"
}

{
	total = total + $3
}

END {
	printf "Total: %10d\n", total
}

awk -f b.awk sample.txt
			</pre>
		</div>
		<div class = "block">
			<span>Flow control</span>
			<pre class = "prettyprint linenums">
# c.awk
BEGIN {
	print "Input an arithmetic expression: "
}

{
	if ( $2 == "+")
		result = $1 + $3
	else if ( $2 == "*")
		result = $1 * $3
	else
	{
		print "Operator is illegal ..."
		exit 1
	}
}

END {
	printf "Result: %10d\n", result
}

awk -f c.awk
1 + 2
Ctrl + D
			</pre>
		</div>
		<div class = "block">
			<span>Loop</span>
			<pre class = "prettyprint linenums">
# d.awk
BEGIN {
	print "==========Loop==========="
}

{
	sum = 0
	for( i = 0; i &lt; 10; i++)
	{
		sum += i
	}

	printf "Total: %10d\n", sum
	exit 1
}
			</pre>
			<pre class = "prettyprint linenums">
# e.awk
BEGIN {
	print "==================="
}

{
	for(j = 1; j &lt;= NF; j++)
		printf "%10s", $j
	printf "\n"
}

			</pre>
		</div>
		<div class = "block">
			<span>Associate array</span>
			<pre class = "prettyprint linenums">
# g.awk
BEGIN {
	print "===========User List==========="
	idx = 0
}

{
	userName[idx] = $1
	idx++
}

END {
	for(i = 0; i &lt; idx; i++)
		print userName[i];
}
			</pre>
			<pre class = "prettyprint linenums">
# h.awk
BEGIN {
	print "===========User List==========="
}

{
	userName[$1] = $3
}

END {
	for(n in userName)
		print n, userName[n];
}
			</pre>
		</div>
		<div class = "block">
			<span>Numerical Functions</span>
			<pre class = "prettyprint linenums">
# i.awk
BEGIN {
	print "Arithmetic functions"
	print "===================="
}

{
	printf "%10s%10f\n", $1, cos($3)
}
			</pre>
			<pre class = "prettyprint linenums">
# j.awk
BEGIN {
	print "Random Number"
	print "===================="
}

{
	printf "%10s%10f\n", $1, rand()
}
			</pre>
		</div>
		<div class = "block">
			<span>String Functions</span>
			<li>index(string,search)</li>
			<li>length(string)</li>
			<li>split(string,array,separator)</li>
			<pre class = "prettyprint linenums">
{
	n = split($0, array, " ")
	for (i = 1; i &lt;= n; i++)
		printf "%10s", array[i]
	printf "\n"
}
			</pre>
			<li>substr(string,position)</li>
			<li>sub(regex,replacement, string), substitute the first match</li>
			<li>gsub(regex,replacement, string), substitute with g option</li>
			<pre class = "prettyprint linenums">
{
	if(gsub("[aeiou]", "-", $0))
		print $0
}
			</pre>
			<li>match(string,regex)</li>
			<pre class = "prettyprint linenums">
{
	if (match($1, /Fred/))
		printf "%10s%10f\n", $1, rand()
}
			</pre>
		</div>
		<div class = "block">
			<span>system</span>
			<pre class = "prettyprint linenums">
{
	if(system("cat n.awk") != 0)
		print "Command does not work ..."
}
			</pre>
		</div>
		<div class = "subtitle" id = "sed">sed</div>
		<div class = "block">
			<li>/g, global replacement</li>
			<li>/p, print</li>
			<li>/w, write to a file</li>
			<li>/I, ignore case</li>
			<li>/d, delete</li>
			<li>/!, reversing</li>
			<li>-n, not print anything unless an explicit request to print is found</li>
		</div>
		<div class = "block">
			Substitution
			<pre class = "prettyprint linenums">
sed 's/Fred/Lin/g' sample.txt &gt; temp.txt, replace "Fred" by "Lin"
sed 's/\(Susy\)\{1,\}/Lin/g' sample.txt, substitute one or more "Susy" with one "Lin"
sed 's/Susy/(&)/g' sample.txt, use & to represent the found string
sed -E 's/[0-9]+/(& &)/g', use extended regular expression with "-E" on Mac, "-r" on Linux system
sed 's/^\([a-zA-Z]\{4\}\) .*\([0-9][0-9]*\)/\2 \1/g sample.txt, remeber the patter 1 and 2 and substitute the line with 2 and 1
sed 's/fred/lin/Ig' sample.txt, substitute 'Fred', 'FRED', et.al. by 'lin'
sed -e 's/a/A/' -e 's/b/B/' sample.txt, multiple commands in one line
</pre>

			<pre class = "prettyprint linenums">
sed '2,8 s/Susy/Lin/g' sample.txt, substitle "Susy" from line 2 to line 8 by "Lin"
sed '/Fred/s/20/10/g' sample.txt, substitute "20" by "10" in the line containing "Fred"
sed '/Fred/s//Lin/g' sample.txt, substitute "Fred" by "Lin" in the line containing "Fred"
sed '/^[a-zA-Z]\{4\}/s//Lin/g' sample.txt, substitute the name containing four characters by "Lin"
			</pre>
		</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
sed '/^$/d', delete blank line
who | sed -n '/lchen/p', search 'lchen' in the output of command who
sed -n '/Susy/p', search the lines containing "Susy" and print them out
sed -n '/Fred/!p' sample.txt, print the line which does not contain "Fred"
sed '10 quit' sample.txt, quit at line 10
sed '/Susy/ i\ Add this line before every line with WORD', insert a line before the lines containing "Susy"
sed -n "/Susy/=", print the line number for the lines containing "Susy"
sed 'y/abcd/ABCD/' sample.txt, transfer "a" to "A", "b" to "B", et. al.
			</pre>
		</div>
		<div class = "block">
			sed -f s.sed sample.txt, implement sed commands from sed script
			<pre class = "prettyprint linenums">
1i\
Substitute the price in the line containing "Fred"
/Fred/s/20/10/g
			</pre>
		</div>
		<div class = "subtitle" id = "vim">vim</div>
		<div class = "block">
			<span>/[pattern]</span>, search words matching a specific pattern
			<pre class = "prettyprint linenums">
/Fred, find "Fred"
/\&lt;Susy\&gt;, search the single word Susy, not "SusySusy"
/\s\d$, search a single digit at the end of the line
/[aeiou]\{2\}, search the string which contains two consecutive vowel
/1.\{1,\}, search a number having two digits and starting with "1"
/".\{-\}", non-greedy search the content between two doule qutation marks
			</pre>
		</div>
		<div class = "block">
			<span>:range s[ubstitute]/pattern/string/cgiI</span>
			<li>range
				<ul>
					<li>%, the whole file</li>
					<li>number, an absolute line number</li>
					<li>., the current line</li>
					<li>$, the last line in the file</li>
					<li>'t, position of mark "t"</li>
					<li>/pattern/, the next line where text "pattern" matches</li>
					<li>?pattern?, the previous line where text "pattern" matches</li>
				</ul>
			</li>
			<li>cgiI
			<ul>
				<li>c, confirm each substitution</li>
				<li>g, replace all occurrences in the line</li>
				<li>i, ignore case for the pattern</li>
				<li>I, don't ignore case for the pattern</li>
			</ul>
			</li>
			<pre class = "prettyprint linenums">
:/me/ s/me/lin/g, substitute "me" by "lin" in the next line where the pattern matches
10,15, s/me/lin/g, substitute "me" from line 10 to line 15
10+1, 15, s/me/lin/g, substitute "me" from line 11 to line 15
:/me/ y, search the next line where the pattern matches and copy to the memory
:// normal p, search for the next Section line and put (paste) the saved text on the next line
:%s/me/lin/g, substitute "me" in the whole file by "lin"
			</pre>
			<pre class = "prettyprint linenums">
:%s/[aeiou]\{2\}/VOWEL/g, replace the string which contains two consecutive vowel with "VOWEL"
:%s/\&lt;Susy\&gt;/TEMP/g, substitute the single word Susy with "TEMP"
:%s/\d\{2,\}$/100/g, substitute the two digit number by 100
:%s/\(Susy\)\{2,\}/Susy/g, substitute the repeat "Susy" by a single "Susy"
			</pre>
		</div>
		<div class = "subtitle" id = "grep">grep</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
grep -n "mellon" sample.txt, match "mellon" in sample.txt and display the line numbers
grep -c "mellon" sample.txt, display how many lines match the pattern
grep -i "fred" sample.txt, make the search case insensitive
grep -v "mellon" sample.txt, take the complement of the regular expression
grep -l "mellon" *, print the filenames of files with lines which match the expression
grep --color=auto "^[A-K]", color the found key words
			</pre>
			<pre class = "prettyprint linenums">
grep '[aeiou]\{2,\}' sample.txt, search the string which contains two consecutive vowel
grep "\&lt;Susy\&gt;" sample.txt, search the single word Susy, not "SusySusy"
grep "2.\{1,\}" sample.txt, search a number having two digits and starting with "2"
grep "\(Susy\)\{2,\}" sample.txt, search the string containing two consecutive "Susy"
grep "^[a-zA-Z]\{4\}\&gt;" sample.txt, search a line starting with four characters
grep "\s[[:digit:]]\{1\}$" sample.txt --color=auto, search single digit at the end of the line
			</pre>
			<pre class = "prettyprint linenums">
cat /etc/passwd | grep root
dmesg | grep -n --color=auto 'eth'
grep -r ‘energywise’ *, search the pattern in the current directory and its sub directories
			</pre>
		</div>
		<div class = "subtitle" id = "egrep">egrep</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
egrep -n "mellon" sample.txt, match "mellon" in sample.txt and display the line numbers
egrep -c "mellon" sample.txt, display how many lines match the pattern
egrep -i "fred" sample.txt, make the search case insensitive
egrep -v "mellon" sample.txt, take the complement of the regular expression
egrep -l "mellon" *, print the filenames of files with lines which match the expression
egrep --color=auto "^[A-K]", color the found key words
			</pre>
			<pre class = "prettyprint linenums">
egrep '[aeiou]{2,}' sample.txt, search the string which contains two consecutive vowel
egrep "\&lt;Susy\&gt;" sample.txt, search the single word Susy, not "SusySusy"
egrep "2.+" sample.txt, search a number having two digits and starting with "2"
egrep "(Susy){2,}" sample.txt, search the string containing two consecutive "Susy"
egrep "^[a-zA-Z]{4}\&gt;" sample.txt, search a line starting with four characters
egrep "(or|is|go)" sample.txt, search the string containing "or", "is", or "go"
egrep "2$" sample.txt, search the string ending with "2"
egrep '^[A-K]' sample.txt, search the string starting with "A" to "K"
			</pre>
		</div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
			<ul>
				<li><a href = "http://www.grymoire.com/Unix/Awk.html">awk</a></li>
				<li><a href = "http://www.grymoire.com/Unix/sed.html">sed</a></li>
				<li><a href = "http://vimregex.com/">vimregex.com</a></li>
				<li><a href = "https://ryanstutorials.net/linuxtutorial/grep.php">egrep</a></li>
				<li><a href = "http://www.cs.columbia.edu/~tal/3261/fall07/handout/egrep_mini-tutorial.htm">egrep tutorial</a></li>
				<li><a href = "http://www.grymoire.com/Unix/Regular.html">Regular Expression</a></li>
			</ul>
		</div>
	</body>
</html>
