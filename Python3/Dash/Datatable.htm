<!DOCTYPE html>

<html>

	<head>

		<title>Python</title>

		<link rel="stylesheet" href="../../css/atelier-sulphurpool-light.css" type="text/css">

		<script src="../../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>

		<style>

			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}

			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}

			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>

	</head>

	<body>
		<div class = "title">
			Datatable
		</div>

		<div class = "subtitle">Datatable Style</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import collections
import dash
import pandas as pd

from dash.dependencies import Output, Input
from dash.exceptions import PreventUpdate

from dash import html
from dash import dcc
from dash import dash_table
import plotly.graph_objects as go

app = dash.Dash(__name__)

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')

app = dash.Dash(__name__)

app.layout = dash_table.DataTable(
    style_data={
        'whiteSpace': 'normal',
        'height': 'auto',
    },
    style_header = {'color': 'red'},
    style_cell_conditional=[
        {'if': {'column_id': 'country'},
         'width': '30%'},
        {'if': {'column_id': 'pop'},
         'width': '30%'},
    ],
    style_cell = {'width': '180px'},
    style_table = {'color': 'silver'},
    data=df.to_dict('records'),
    columns=[{'id': c, 'name': c} for c in df.columns],
    fixed_rows = {'headers': True, 'data': 1},
    page_size = 100,
    page_action = 'native',
    tooltip_data=[
        {
            column: {'value': str(value), 'type': 'markdown'}
            for column, value in row.items()
        } for row in df.to_dict('records')
    ],
    tooltip_duration=None,
)

if __name__ == '__main__':
    app.run_server(debug=True)
        <pre>
        </div>
		<div class = "block">
        <li><span>data</span>, list of dict
            <ul>
                <li>content of the table</li>
                <li>can be generated from Pandas</li>
            </ul>
        </li>
		<pre class = "prettyprint linenums">
data = [ {'column-1': 4.5, 'column-2': 'montreal', 'column-3': 'canada'}, {'column-1': 8, 'column-2': 'boston', 'column-3': 'america'} ]
        </pre>
		<pre class = "prettyprint linenums">
data=df.to_dict('records')
        </pre>
        <li><span>columns</span>, list of dict
            <ul>
                <li>name, string, name appears in the column header</li>
                <li>id, string, the id of the column, not visible in the table</li>
            </ul>
        </li>
		<pre class = "prettyprint linenums">
columns=[{'id': c, 'name': c} for c in df.columns]
        </pre>
        <li><span>page_size</span>, the number of rows that will be displayed</li>
        <li><span>page_action</span>
            <ul>
                <li>native, default, paging with all data is passed to up-front</li>
                <li>custome, one page data is passed at a time, used for back paging</li>
                <li>none, disable paging</li>
            </ul>
        </li>
        <li><span>fixed_columns</span>, dict
            <ul>
                <li>fix the set of columns</li>
            </ul>
        </li>
        <li><span>fixed_rows</span>, dict
            <ul>
                <li>fix the set of rows</li>
            </ul>
        </li>
		<pre class = "prettyprint linenums">
# fix headers and first data row
fixed_rows = {'headers': True, 'data': 1}
        </pre>
        <li><span>tooltip_data</span>, list of dicts
            <ul>
                <li>the tooltip shown when the cursor hovers on a cell</li>
            </ul>
        </li>
		<pre class = "prettyprint linenums">
tooltip_data=[
        {
            column: {'value': str(value), 'type': 'markdown'}
            for column, value in row.items()
        } for row in df.to_dict('records')]
        </pre>
        <li><span>tooltip_duration</span>, int
            <ul>
                <li>duration time of tooltip in milliseconds</li>
                <li>None, tooltip lasts, not disappear</li>
            </ul>
        </li>
        </div>
		<div class = "block">
            <li><span>Styles Priority</span></li>
		<pre class = "prettyprint linenums">
1. style_data_conditional
2. style_data # excludes the header and filter cells.
3. style_filter_conditional
4. style_filter
5. style_header_conditional
6. style_header # header cells
7. style_cell_conditional
8. style_cell # includes the header cells, the data cells, and the filter cells
        </pre>
        <li><span>style_cell</span>, dict</li>
		<pre class = "prettyprint linenums">
style_cell = {'background-color': 'rgba(51, 51, 51, 1)', # background color
    'text-align':'center', # text alignment
    'minWidth': 95, 'maxWidth': 95, 'width': 95, # fixed cell width
    }
        </pre>
        <li><span>style_cell_conditional</span>, list of dicts</li>
		<pre class = "prettyprint linenums">
    style_cell_conditional=[
        {'if': {'column_id': 'country'},
         'width': '30%', 'color': 'blue'},
        {'if': {'column_id': 'year'},
         'width': '30%'},]
        </pre>
        <li><span>style_table</span></span>, style of outer table container
		<pre class = "prettyprint linenums">
style_table = {'color': 'silver'} # font color
        </pre>
		<pre class = "prettyprint linenums">
# style_header
style_header = {'color': 'red'}
        </pre>
		<pre class = "prettyprint linenums">
# style_data
style_data = {'font-size': '18px'} # excludes the header and filter cells
        </pre>
		<pre class = "prettyprint linenums">
# different styles for even/odd rows
style_data_conditional=[
           {
               'if': {'row_index': 'odd'},
               'backgroundColor': 'rgb(248, 248, 248)',
               'color': 'white',
           }
       ],
        </pre>
		<pre class = "prettyprint linenums">
style_as_list_view=True, # not have borders between the columns
        </pre>
        </div>
		<div class = "subtitle">Select a Single Row</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import dash
from dash.dependencies import Input, Output, State
import dash_table
import dash_core_components as dcc
import dash_html_components as html
from dash.exceptions import PreventUpdate
import pandas as pd

app = dash.Dash(__name__)

params = [
    'Weight', 'Torque', 'Width', 'Height',
    'Efficiency', 'Power', 'Displacement'
]

app.layout = html.Div([
    dash_table.DataTable(
        id='table-editing-simple',
        columns=[{'id': 'Model', 'name': 'Model', 'deletable':True, 'selectable':True}] +[{'id': p, 'name': p} for p in params],
        data=[
            dict(Model=i, **{param: 0 for param in params})
            for i in range(1, 5)
        ],
        row_selectable='single',
        cell_selectable=False
    ),
    html.Div(id='display')
])


@app.callback(
    Output('display', 'children'),
    Input('table-editing-simple', 'selected_rows'), # list of indices of selected rows
    State('table-editing-simple', 'data'), # table data
    State('table-editing-simple', 'columns') # describes various aspects about columns
    )
def display_output(index, rows, columns):
    if not index:
        raise PreventUpdate
    if len(index) == 0:
        raise PreventUpdate
    return str(rows[index[0]])


if __name__ == '__main__':
    app.run_server(debug=True)
		</pre>
		</div>
		<div class = "subtitle">Select Columns</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import dash
from dash.dependencies import Input, Output, State
import dash_table
import dash_core_components as dcc
import dash_html_components as html
from dash.exceptions import PreventUpdate
import pandas as pd

app = dash.Dash(__name__)

params = [
    'Weight', 'Torque', 'Width', 'Height',
    'Efficiency', 'Power', 'Displacement'
]

app.layout = html.Div([
    dash_table.DataTable(
        id='table-editing-simple',
        columns=
            [{'id': 'Model', 'name': 'Model', 'selectable':True}] +
        [{'id': p, 'name': p, 'selectable': True} for p in params],
        data=[
            dict(Model=i, **{param: 0 for param in params})
            for i in range(1, 5)
        ],
        column_selectable='multi',
        selected_columns = [],
        cell_selectable=False
    ),
    html.Div(id='display')
])


@app.callback(
    Output('display', 'children'),
    Input('table-editing-simple', 'selected_columns'),
    State('table-editing-simple', 'data'),
    State('table-editing-simple', 'columns'))
def display_output(index, rows, columns):
    if not index:
        raise PreventUpdate
    if len(index) == 0:
        raise PreventUpdate
    return str(index)


if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
		<div class = "subtitle">Row IDs</div>
		<div class = "block">
            <li><span>derived_virtual_indices</span>, the indices of rows across all pages after filtering and sorting</li>
            <li><span>derived_viewport_indices</span>, the indices of rows on the currently visible page</li>
            <li><span>selected_rows and row_selectable</span>, indices of rows that are selected</li>
            <li><span>derived_virtual_selected_rows</span>,  the set of selected rows after filtering and sorting, across all page</li>
            <li><span>derived_viewport_selected_rows</span>, the set of selected rows on the currently visible page</li>
        </div>
		<div class = "subtitle">Cell</div>
		<div class = "block">
            <li><span>active_cell</span>, the data cell the user has put the cursor on, by clicking and/or arrow keys</li>
            <li><span>start_cell</span>, the initial cell of the selected cells</li>
            <li><span>end_cell</span>, the last cell of the selected cells</li>
            <li><span>selected_cells</span>, the selected cells</li>
        </div>
		<div class = "subtitle">Backend Paging</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import dash
from dash.dependencies import Input, Output
import dash_table
import pandas as pd


df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder2007.csv')

df[' index'] = range(1, len(df) + 1)

app = dash.Dash(__name__)

PAGE_SIZE = 5

app.layout = dash_table.DataTable(
    id='datatable-paging',
    columns=[
        {"name": i, "id": i} for i in sorted(df.columns)
    ],
    page_current=0,
    page_size=PAGE_SIZE,
    page_action='custom'
)


@app.callback(
    Output('datatable-paging', 'data'),
    Output('datatable-paging', 'page_count'),
    Input('datatable-paging', "page_current"),
    Input('datatable-paging', "page_size"))
def update_table(page_current,page_size):
    num = int(df.shape[0]/PAGE_SIZE)
    if df.shape[0]%PAGE_SIZE &gt; 0:
        num += 1
    return df.iloc[
        page_current*page_size:(page_current+ 1)*page_size
    ].to_dict('records'), num


if __name__ == '__main__':
    app.run_server(debug=True)
		</pre>
		</div>
		<div class = "subtitle">Sorting</div>
		<div class = "block">
            <li>Default sorting</li>
		<pre class = "prettyprint linenums">
import dash
import dash_table
import pandas as pd

df = pd.read_csv('Train_25.csv')
#df = df.iloc[:10, :10]

app = dash.Dash(__name__)

app.layout = dash_table.DataTable(
    id='table',
    data=df.to_dict('records'),
    columns=[{"id": i, "name": i} for i in df.columns],
    page_size = 10,
    sort_action="native",
    sort_mode="multi",
)

if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
		<div class = "subtitle">Custom Sorting</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import dash
import dash_html_components as html
from dash.dependencies import Input, Output, State
import dash_table
from dash.exceptions import PreventUpdate
import pandas as pd


df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder2007.csv')

df[' index'] = range(1, len(df) + 1)

app = dash.Dash(__name__)

PAGE_SIZE = 5
num = int(df.shape[0]/PAGE_SIZE)
if df.shape[0]%PAGE_SIZE > 0:
    num += 1

app.layout = html.Div([dash_table.DataTable(
    id='datatable-paging',
    columns=[
        {"name": i, "id": i} for i in sorted(df.columns)
    ],
    row_selectable='single',
    cell_selectable=False,
    page_current=0,
    page_count=num,
    page_size=PAGE_SIZE,
    page_action='custom',
    sort_action='custom',
    sort_mode='multi',
    sort_by=[]
    ),
    html.Div(id='display')])


@app.callback(
    Output('datatable-paging', 'data'),
    Input('datatable-paging', "page_current"),
    Input('datatable-paging', "page_size"),
    Input('datatable-paging', "sort_by"))
def update_table(page_current,page_size, sort_by):
    print(sort_by)
    if len(sort_by):
        dff = df.sort_values(
            [col['column_id'] for col in sort_by],
            ascending=[
                col['direction'] == 'asc'
                for col in sort_by
            ],
            inplace=False
        )
        print('Sorted ...')
    else:
        # No sort is applied
        dff = df
    return dff.iloc[
        page_current*page_size:(page_current+ 1)*page_size
    ].to_dict('records')

@app.callback(
    Output('display', 'children'),
    Input('datatable-paging', 'derived_viewport_selected_rows'),
    State('datatable-paging', 'data'))
def display_output(index, rows):
    print(index)
    if not index:
        raise PreventUpdate
    if len(index) == 0:
        raise PreventUpdate
    return str(rows[index[0]])

if __name__ == '__main__':
    app.run_server(debug=True)
		</pre>
		</div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
            <li><a href = "https://dash.plotly.com/datatable/reference">Datatable Reference</a></li>
			<li><a href = "https://dash.plotly.com/datatable">Documentation</a></li>
		</div>
	</body>
</html>
