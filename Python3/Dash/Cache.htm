<!DOCTYPE html>
<html>
	<head>
		<title>Python</title>
		<link rel="stylesheet" href="../../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Cache
		</div>

        <div class = "subtitle">Installation</div>
        <div class = "block">
		<pre class = "prettyprint linenums">
pip install Flask-Caching
        </pre>
        </div>
        <div class = "subtitle">FileSystemCache</div>
        <div class = "block">
		<pre class = "prettyprint linenums">
import time
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
from os import path
from flask_caching import Cache

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

cache = Cache(app.server, config={
    'CACHE_TYPE': 'FileSystemCache',
    'CACHE_DIR': 'cache',
    'CACHE_THRESHOLD': 200, # The maximum number of items the cache will store
    'CACHE_DEFAULT_TIMEOUT': 60 # The default timeout, unit of time is seconds
})

cache.clear() # clean up cache files

app.layout = html.Div([
    dcc.Input(id = 'input'),
    html.Hr(),
    dcc.Loading(html.H1(id = 'content')),
    html.Button('Click', id = 'button'),
], className='container')

# for the same parameter value, first call save results to cache
# second and later calls will reuse the results
# changing the parameter value, a new cache will be created
@cache.memoize()
def inside(value):
    time.sleep(5)
    return str(2*value)

@app.callback(
    Output('content', 'children'),
    Input('button', 'n_clicks'),
    State('input', 'value')
)
def update_output_1(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate
    return inside(value) # pause 5 seconds

if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
		<div class = "subtitle">NullCache</div>
		<div class = "block">
            <li>Not cache</li>
		<pre class = "prettyprint linenums">
import time
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
from flask_caching import Cache

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

cache = Cache(app.server, config={
    'CACHE_TYPE': 'NullCache',
})

app.layout = html.Div([
    dcc.Input(id = 'input'),
    html.Hr(),
    dcc.Loading(html.H1(id = 'content')),
    html.Button('Click', id = 'button'),
], className='container')

@cache.memoize()
def inside(value):
    time.sleep(5)
    return str(2*value)

@app.callback(
    Output('content', 'children'),
    Input('button', 'n_clicks'),
    State('input', 'value')
)
def update_output_1(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate
    return inside(value) # pause 5 seconds

if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
		<div class = "subtitle">SimpleCache</div>
		<div class = "block">
            <li>Uses a python dictionary for caching, is not really thread safe</li>
		<pre class = "prettyprint linenums">
import time
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
from flask_caching import Cache

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

cache = Cache(app.server, config={
    'CACHE_TYPE': 'SimpleCache',
    'CACHE_THRESHOLD': 200, # The maximum number of items the cache will store
    'CACHE_DEFAULT_TIMEOUT': 30 # The default timeout, unit of time is seconds
})

app.layout = html.Div([
    dcc.Input(id = 'input'),
    html.Hr(),
    dcc.Loading(html.H1(id = 'content')),
    html.Button('Click', id = 'button'),
], className='container')

@cache.memoize()
def inside(value):
    time.sleep(5)
    return str(2*value)

@app.callback(
    Output('content', 'children'),
    Input('button', 'n_clicks'),
    State('input', 'value')
)
def update_output_1(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate
    return inside(value) # pause 5 seconds

if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
		<div class = "subtitle">RedisCache</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import time
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
from flask_caching import Cache

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

cache = Cache(app.server, config={
    'CACHE_TYPE': 'RedisCache',
    'CACHE_DEFAULT_TIMEOUT': 60, # The default timeout, unit of time is seconds
    'CACHE_REDIS_HOST': '127.0.0.1',
    'CACHE_REDIS_PORT': 6379
})

app.layout = html.Div([
    dcc.Input(id = 'input'),
    html.Hr(),
    dcc.Loading(html.H1(id = 'content')),
    html.Button('Click', id = 'button'),
], className='container')

# for the same parameter value, first call save results to cache
# second and later calls will reuse the results
# changing the parameter value, a new cache will be created
@cache.memoize()
def inside(value):
    time.sleep(5)
    return str(2*value)

@app.callback(
    Output('content', 'children'),
    Input('button', 'n_clicks'),
    State('input', 'value')
)
def update_output_1(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate
    return inside(value) # pause 5 seconds

if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
        <div class = "subtitle">Cashed Function Calls Cashed Function</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import time
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
from os import path
from flask_caching import Cache

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

cache = Cache(app.server, config={
    'CACHE_TYPE': 'RedisCache',
    'CACHE_DEFAULT_TIMEOUT': 60, # The default timeout, unit of time is seconds
    'CACHE_REDIS_HOST': '127.0.0.1',
    'CACHE_REDIS_PORT': 6379
})

app.layout = html.Div([
    dcc.Input(id = 'input'),
    html.Hr(),
    dcc.Loading(html.H1(id = 'content')),
    html.Button('Click', id = 'button'),
    html.Hr(),
    dcc.Loading(html.H1(id = 'content_2')),
    html.Button('Click 2', id = 'button2')
], className='container')

@cache.memoize()
def compute_expensive_data(value):
    time.sleep(5)
    return str(inside(value))

@cache.memoize()
def inside(value):
    time.sleep(5)
    return str(2*value)

@app.callback(
    Output('content', 'children'),
    Input('button', 'n_clicks'),
    State('input', 'value')
)
def update_output_1(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate
    return inside(value) # pause 5 seconds

@app.callback(
    Output('content_2', 'children'),
    Input('button2', 'n_clicks'),
    State('input', 'value')
)
def update_output_2(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate
    return compute_expensive_data(value) # pause 10 seconds

if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
		<div class = "subtitle">Store Cache Data for Each Session on Server Side</div>
        <div class = "block">
            <li>Each tab creates a new session</li>
		<pre class = "prettyprint linenums">
import time
import uuid
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
from os import path
from flask_caching import Cache

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

cache = Cache(app.server, config={
    'CACHE_TYPE': 'RedisCache',
    'CACHE_DEFAULT_TIMEOUT': 60, # The default timeout, unit of time is seconds
    'CACHE_REDIS_HOST': '127.0.0.1',
    'CACHE_REDIS_PORT': 6379
})

def get_layout():
    uid = str(uuid.uuid4())

    return html.Div([
        dcc.Loading(html.H1(id = 'content')),
        html.Button('Click', id = 'button'),
        dcc.Store(data = uid, id='session-id')
    ], className='container')

# a new session is created each time the page is loaded
app.layout = get_layout # not get_layout()

@cache.memoize()
def compute_expensive_data(session_id):
    time.sleep(5)
    f = open('readme.txt', "r")
    output_str = f.readline()
    f.close()
    return output_str + ' ' + str(session_id)

@app.callback(
    Output('content', 'children'),
    Input('button', 'n_clicks'),
    State('session-id', 'data')
)
def update_output_1(n_clicks, data):
    if not n_clicks:
        raise PreventUpdate
    print(data) # display session id
    return compute_expensive_data(data)

if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
		<div class = "subtitle">API</div>
        <div class = "block">
            cached
            <ul>
                <li><span>timeout</span>, int
                    <ul>
                        <li>cache time in second</li>
                    </ul>
                </li>
                <li><span>key_prefix</span>, str
                    <ul>
                        <li>by default, key is flask_cache_view//_dash-update-component</li>
                        <li><span>all function</span> use flask_cache_view//_dash-update-component as the key</li>
                        <li>one function with <span>different parameter values</span> use flask_cache_view//_dash-update-component as the key</li>
                    </ul>
                </li>
		<pre class = "prettyprint linenums">
@cache.cached(timeout=50, key_prefix='index_') # key is "flask_cache_index_"
def index(data, l):
    time.sleep(5)
    return data+'Cached for 50s'
        </pre>
                <li><span>unless</span>, callable function
                    <ul>
                        <li>cache will always execute the caching facilities unless this callable is <span>true</span></li>
                        <li>callable function takes <span>function id</span>, <span>parameter values</span></li>
                        <li><span>function id</span> is the id of a function running on server side</li>
                    </ul>
                </li>
		<pre class = "prettyprint linenums">
def unless_function(*args, **kwargs):
    print('args', args) # function index, parameter values
    print('kwargs', kwargs) # parameters
    if len(args[1]) > 4:
        return True
    return False

@cache.cached(timeout=50, unless = unless_function)
def index(data, l):
    time.sleep(5)
    return data+'Cached for 50s'
        </pre>
                <li><span>forced_update</span>, callable function
                    <ul>
                        <li>if this callable is true, cache value will be updated regardless cache is expired or not</li>
                        <li>callable function takes <span>parameter values</span></li>
                    </ul>
                </li>
		<pre class = "prettyprint linenums">
def force_function(*args, **kwargs):
    print('args', args) # parameter values
    print('kwargs', kwargs) # parameters
    if len(args[0]) > 4:
        return True
    return False

@cache.cached(timeout=50, forced_update = force_function)
def index(data, l):
    time.sleep(5)
    return data+'Cached for 50s'
        </pre>
                <li><span>response_filter</span>, callable function
                    <ul>
                        <li>if this callable return true, cache the response content, otherwise, not cache the response content</li>
                        <li>callable function takes the <span>response content</span></li>
                    </ul>
                </li>
		<pre class = "prettyprint linenums">
def response_function(*args, **kwargs):
    print('args', args) # content from index function
    print('kwargs', kwargs)
    return True

@cache.cached(timeout=50, response_filter = response_function)
def index(data, l):
    time.sleep(5)
    return data+'Cached for 50s'
        </pre>
                <li><span>query_string</span>, boolean
                    <ul>
                        <li>True, the cache key used will be the result of hashing the ordered query string parameters</li>
                        <li>avoids creating different caches for the same query just because the parameters were passed in a different order</li>
                    </ul>
                </li>
                <li><span>hash_method</span>
                    <ul>
                        <li>hashlib.sha1, hashlib.sha224, hashlib.sha256, hashlib.sha384, hashlib.sha512, hashlib.md5 (default)</li>
                    </ul>
                </li>
                <li><span>make_cache_key</span>, callable function
                    <ul>
                        <li>generate a key with parameter values, flask_cache_ + (parameter values)</li>
                        <li>callable function takes <span>parameter values</span></li>
                    </ul>
                </li>
		<pre class = "prettyprint linenums">
def make_cache_key_function(*args, **kwargs):
    print(args)
    print(kwargs)
    return str(args)+'_'+str(kwargs)

@cache.cached(timeout=50, make_cache_key = make_cache_key_function)
def index(data, l):
    time.sleep(5)
    return data+'Cached for 50s'
        </pre>
                <li><span>source_check</span>, boolean
                    <ul>
                        <li>if True, include the function’s source code in the hash</li>
                        <li><span>exclusive</span> to make_cache_key</li>
                    </ul>
                </li>
            </ul>
        </div>
        <div class = "block">
        memoize
        <ul>
                <li>one function with <span>different parameter values</span> generates <span>different keys</span></li>
                <li><span>two functions</span> with the same parameter values generate <span>different keys</span></li>
                <li><span>timeout</span>, int
                    <ul>
                        <li>cache time in second</li>
                    </ul>
                </li>
                <li><span>make_name</span>, callable function
                    <ul>
                        <li>accepts the function name as the argument, returns a new string to be used as the function name</li>
                    </ul>
                </li>
		<pre class = "prettyprint linenums">
def make_function(*args, **kwargs):
    print('args', args) # __main__.index
    print('kwargs', kwargs)
    return 'temp'

@cache.memoize(timeout=50, make_name = make_function)
def index(data, l):
    time.sleep(5)
    return data+'Cached for 50s'
        </pre>
        <li><span>unless</span>, callable function
            <ul>
                <li>cache will always execute the caching facilities unless this callable is true</li>
                <li>callable function takes <span>function id</span>, <span>parameter values</span></li>
            </ul>
        </li>
        <li><span>forced_update</span>, callable function
            <ul>
                <li>if this callable is true, cache value will be updated regardless cache is expired or not</li>
                <li>callable function takes parameter values</li>
            </ul>
        </li>
        <li><span>response_filter</span>, callable function
            <ul>
                <li>if this callable return true, cache the response content, otherwise, not cache the response content</li>
                <li>callable function takes the response content</li>
            </ul>
        </li>
        <li><span>hash_method</span>
            <ul>
                <li>hashlib.sha1, hashlib.sha224, hashlib.sha256, hashlib.sha384, hashlib.sha512, hashlib.md5 (default)</li>
            </ul>
        </li>
        <li><span>source_check</span>, boolean
            <ul>
                <li>if True, include the function’s source code in the hash</li>
            </ul>
        </li>
        <li><span>args_to_ignore</span>, boolean
            <ul>
                <li>ignore parameter values while generating the cache key</li>
            </ul>
        </li>
		<pre class = "prettyprint linenums">
@cache.memoize(timeout=50, args_to_ignore = ['update', 'data'])
def index(update, data, l):
    time.sleep(5)
    return str(update)+' '+data+'Cached for 50s'
        </pre>
        </ul>
        </div>
		<div class = "subtitle">Example</div>
        <div class = "block">
			<p style = "text-align:center;"><img src = "img/Dash_32.png" width = "30%"></p>
		</div>
        <div class = "block">
            <li>Button_1, get value by key, if key does not exist, create the key/value pair</li>
            <li>Button_2, update value, if key does not exist, create the key/value pair</li>
        </div>
        <div class = "block">
		<pre class = "prettyprint linenums">
# redis-py
import time
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
import redis
import pickle

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

re = redis.Redis(host='localhost', port=6379, db=0)

app.layout = html.Div([
    dcc.Input(id = 'input'),
    html.Hr(),
    dcc.Loading(html.H1(id = 'content')),
    html.Button('Button_1', id = 'button'),
    dcc.Loading(html.H1(id = 'content2')),
    html.Button('Button_2', id = 'button2'),
], className='container')

@app.callback(
    Output('content', 'children'),
    Input('button', 'n_clicks'),
    State('input', 'value')
)
def update_output_1(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate

    # get
    if re.exists('container'):
        return str(pickle.loads(re.get('container')))

    # initialization
    l = [False, value, {'k1':'v1', 'k2':'v2'}]
    re.set('container', pickle.dumps(l), ex=50)

    return str(l)

@app.callback(
    Output('content2', 'children'),
    Input('button2', 'n_clicks'),
    State('input', 'value')
)
def update_output_2(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate

    # initialization
    if not re.exists('container'):
        temp = [False, value, {'k1':'v1', 'k2':'v2'}]
        re.set('container', pickle.dumps(temp), ex=50)
        return str(temp)

    # update
    temp = pickle.loads(re.get('container'))
    temp[1] = value
    re.set('container', pickle.dumps(temp), ex=50)

    return str(temp)

if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
        <div class = "block">
		<pre class = "prettyprint linenums">
# flask-caching
import time
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
from flask_caching import Cache
from flask import request

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server

cache = Cache(app.server, config={
    'CACHE_TYPE': 'RedisCache',
    'CACHE_DEFAULT_TIMEOUT': 60, # The default timeout, unit of time is seconds
    'CACHE_REDIS_HOST': '127.0.0.1',
    'CACHE_REDIS_PORT': 6379
})

app.layout = html.Div([
    dcc.Input(id = 'input'),
    html.Hr(),
    dcc.Loading(html.H1(id = 'content')),
    html.Button('Button_1', id = 'button'),
    dcc.Loading(html.H1(id = 'content2')),
    html.Button('Button_2', id = 'button2'),
], className='container')

def force_function(*args, **kwargs):
    print('args', args) # parameter values
    print('kwargs', kwargs) # parameters
    return args[0]

# generate key by ignore parameter update
# the update value is used to decide whether force update or not
@cache.memoize(timeout=50, args_to_ignore = ['update'], forced_update = force_function)
def index(update, data, l):
    time.sleep(5)
    return str(update)+' '+data+'Cached for 50s'

@app.callback(
    Output('content', 'children'),
    Input('button', 'n_clicks'),
    State('input', 'value')
)
def update_output_1(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate
    return index(False, value, {'k1':'v1', 'k2':'v2'}) # get value, if key does not exist, create the key/value pair

@app.callback(
    Output('content2', 'children'),
    Input('button2', 'n_clicks'),
    State('input', 'value')
)
def update_output_2(n_clicks, value):
    if not n_clicks:
        raise PreventUpdate
    return index(True, value, {'k1':'v1', 'k2':'v2'}) # update value

if __name__ == '__main__':
    app.run_server(debug=True)
        </pre>
        </div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
            <li><a href = "https://flask-caching.readthedocs.io/en/latest/api.html#">API</a></li>
            <li><a href = "https://github.com/pallets-eco/flask-caching">Github</a></li>
            <li><a href = "https://flask-caching.readthedocs.io/en/latest/">Flask-Caching</a></li>
        </div>
    </body>
</html>
