<!DOCTYPE html>
<html>
	<head>
		<title>Python</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
            span {color: red; font-weight: bold}
		</style>
	</head>
	<body>
		<div class = "title">
            itertools
		</div>

		<div class = "block">
            Intends to be fast and use memory efficiently, and also to be hooked together to express more complicated iteration-based algorithms
        </div>
		<div class = "subtitle">chain</div>
		<div class = "block">
            <li>Takes several iterators as arguments and returns a single iterator</li>
		<pre class = "prettyprint linenums">
from itertools import *

a = [1, 2, 3]
b = ['a', 'b', 'c']
c = [10, 20, 30]

# chain
d = chain(a, b, c) # decorator
for i in d:
    print(i, end = ' ') # 1 2 3 a b c 10 20 30
print()

# chain.from_iterable
d = chain.from_iterable([a, b, c]) # decorator
for i in d:
    print(i, end = ' ') # 1 2 3 a b c 10 20 30
print()
        </pre>
        </div>
		<div class = "subtitle">zip_longest</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# zip() stops when the first input iterator is exhausted
a = [1, 2, 3]
b = ['a', 'b', 'c', 'd']

for e in zip(a, b):
    print(e)

# (1, 'a')
# (2, 'b')
# (3, 'c')
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# substitutes None for any missing values
from itertools import *

a = [1, 2, 3]
b = ['a', 'b', 'c', 'd']

for e in zip_longest(a, b):
    print(e)

# (1, 'a')
# (2, 'b')
# (3, 'c')
# (None, 'd')
        </pre>
        </div>
		<div class = "subtitle">islice</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# slice with parameters, start, stop, and ste
from itertools import *

l = list(range(10))

for i in islice(l, 1, 5, 2):
    print(i, end=' ')
print('\n')
        </pre>
        </div>
		<div class = "subtitle">tee</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# return n independent iterators from a single iterable
# the new iterators created by tee() share their input, so the original iterator should not be used after the new ones are created
from itertools import *

l = list(range(10))

l1, l2, l3 = tee(l, 3)

print(list(l1))
print(list(l2))
print(list(l3))
        </pre>
        </div>
		<div class = "subtitle">starmap</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
def multiply(x, y):
    return (x, y, x * y)

r = map(multiply, range(5), range(5, 10))

for i in r:
    print(i) # tuple

# (0, 5, 0)
# (1, 6, 6)
# (2, 7, 14)
# (3, 8, 24)
# (4, 9, 36)
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
from itertools import *

def multiply(x, y):
    return (x, y, x * y)

values = [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]

r = starmap(multiply, values)

for i in r:
    print(i)

# (0, 5, 0)
# (1, 6, 6)
# (2, 7, 14)
# (3, 8, 24)
# (4, 9, 36)
        </pre>
        </div>
		<div class = "subtitle">count</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# generate infinite numbers
from itertools import *

c = count(10, 2)

for i in zip(c, [1, 2, 3]):
    print(i)

# (10, 1)
# (12, 2)
# (14, 3)
        </pre>
        </div>
    </body>
</html>
