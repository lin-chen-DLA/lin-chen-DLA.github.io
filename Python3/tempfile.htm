<!DOCTYPE html>
<html>
	<head>
		<title>Python</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
		</style>
	</head>
	<body>
		<div class = "title">
			tempfile
		</div>

		<div class = "subtitle">Temporary File</div>
		<div class = "block">
            <li>Create temporary files with unique names securely</li>
            <li>Is impossible for another program to find or open the file</li>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# create a temporary file and remove manually
import os

filename = '/tmp/{}.txt'.format(os.getpid())

with open(filename, 'w+') as temp:
    temp.write('temp.name:')
    temp.write('  {!r}'.format(temp.name)) # !r, repr

# Clean up the temporary file
os.remove(filename)
        </pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# create a temporary file and remove automatically
# the temporary file has no name
# by default, the file handle is with mode 'w+b'
import tempfile

with tempfile.TemporaryFile() as temp:
    print('temp.name:')
    print('  {!r}'.format(temp.name))
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# IO
import tempfile

with tempfile.TemporaryFile(mode='w+t') as f:
    f.writelines(['first', 'second']) # write

    f.seek(0)

    # read
    for line in f:
        print(line)
        </pre>
        </div>
		<div class = "subtitle">Named Temporary File</div>
		<div class = "block">
            <li>A named temporary file allow the multiple processes of application to share intermediate content</li>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# create a temporary file with a name
# delete = True, delete_on_close = True, the file is removed after the handle is closed
# delete = True, delete_on_close = True, the file is deleted on context manager exit only
# delete = False, the value of delete_on_close is ignored, the file is not deleted
import tempfile

with tempfile.NamedTemporaryFile(delete=False) as temp:
    print('temp.name:')
    print('  {!r}'.format(temp.name))
        </pre>
        </div>
		<div class = "subtitle">Spooled Files</div>
		<div class = "block">
            <li>When the amount of data is less than a threshold, holds the file contents in memory using a io.BytesIO or io.StringIO buffer</li>
            <li>When the amount of data is greater than the threshold, the buffer is replaced with a normal TemporaryFile()</li>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import tempfile

with tempfile.SpooledTemporaryFile(max_size=100, mode='w+t', encoding='utf-8') as temp:

    for i in range(3):
        # write
        temp.write('This line is repeated over and over.\n')
        print(temp._rolled, temp._file)

        # read
        temp.seek(0, 0)
        for line in temp:
            print(line)
        </pre>
        </div>
		<div class = "subtitle">Temporary Directories</div>
		<div class = "block">
            <li>Create a single temporary directory</li>
            <li>Create temporatory files under the temporary ddirectory</li>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import pathlib
import tempfile

with tempfile.TemporaryDirectory() as directory_name:
    the_dir = pathlib.Path(directory_name)

    # write
    a_file = the_dir / 'a_file.txt'
    a_file.write_text('Content in a_file')

    b_file = the_dir / 'b_file.txt'
    b_file.write_text('Content in b_file')

    # read
    print(a_file.read_text())
    print(b_file.read_text())
        </pre>
        </div>
		<div class = "subtitle">Predicting Names</div>
		<div class = "block">
            name = dir + prefix + <span style = "color:red; font-weight:bold;">random</span> + suffix
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import tempfile

with tempfile.NamedTemporaryFile(suffix='_suffix', prefix='prefix_', dir='/tmp') as temp:
    print('temp.name:', temp.name)
        </pre>
        </div>
		<div class = "subtitle">Temporary File Location</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import tempfile

# temporary dir
print('gettempdir():', tempfile.gettempdir())

# temporary prefix
print('gettempprefix():', tempfile.gettempprefix())

# set temporary dir
tempfile.tempdir = '/I/changed/this/path'
print('gettempdir():', tempfile.gettempdir())
        </pre>
        </div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
			<ul>
                <li><a href = "https://docs.python.org/3/library/tempfile.html">Python STL</a></li>
                <li><a href = "https://pymotw.com/3/tempfile/">PyMOTW</a></li>
			</ul>
		</div>
	</body>
</html>
