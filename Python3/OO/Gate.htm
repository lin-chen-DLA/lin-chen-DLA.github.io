<!DOCTYPE html>
<html>
	<head>
		<title>Python</title>
		<link rel="stylesheet" href="../../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
		</style>
	</head>
	<body>
		<div class = "title">
			Gate
		</div>

        <div class = "block">
			<p style = "text-align:center;"><img src = "img/OO_2.png" width = "40%"></p>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
class LogicGate:

    def __init__(self,n: str) -&gt; None:
        self.label = n
        self.output = None

    def getLabel(self) -&gt; str:
        return self.label

    def getOutput(self):
        self.output = self.performGateLogic() # not implement yet
        return self.output
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
class BinaryGate(LogicGate):

    def __init__(self,n: str) -&gt; None:
        LogicGate.__init__(self,n)

        self.pinA = None
        self.pinB = None

    def getPinA(self) -&gt; int:
        return int(input("Enter Pin A input for gate "+ self.getLabel()+"--&gt;"))

    def getPinB(self) -&gt; int:
        return int(input("Enter Pin B input for gate "+ self.getLabel()+"--&gt;"))
    
class UnaryGate(LogicGate):

    def __init__(self,n: str) -&gt; None:
        LogicGate.__init__(self,n)

        self.pin = None

    def getPin(self) -&gt; int:
        return int(input("Enter Pin input for gate "+ self.getLabel()+"-->"))
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
class AndGate(BinaryGate):

    def __init__(self,n: str) -> None:
        super(AndGate,self).__init__(n)

    def performGateLogic(self) -> int:

        a = self.getPinA()
        b = self.getPinB()
        if a==1 and b==1:
            return 1
        else:
            return 0
        
class OrGate(BinaryGate):

    def __init__(self,n: str) -> None:
        super(OrGate,self).__init__(n)

    def performGateLogic(self) -> int:

        a = self.getPinA()
        b = self.getPinB()
        if a==1 or b==1:
            return 1
        else:
            return 0
        
class NotGate(UnaryGate):

    def __init__(self,n: str) -> None:
        super(NotGate,self).__init__(n)

    def performGateLogic(self) -> int:

        a = self.getPin()
        if a==1:
            return 0
        else:
            return 1
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
g1 = AndGate('G1')
g1.getOutput()

g2 = OrGate('G2')
g2.getOutput()

g3 = NotGate('G3')
g3.getOutput()
        </pre>
        </div>
        <div class = "subtitle">Reference</div>
		<div class = "block">
            <li><a href = "https://runestone.academy/ns/books/published/pythonds/Introduction/ObjectOrientedProgramminginPythonDefiningClasses.html">Problem Solving with Algorithms and Data Structures using Python</a></li>
        </div>
    </body>
</html>
