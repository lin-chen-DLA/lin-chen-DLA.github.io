<!DOCTYPE html>
<html>
	<head>
		<title>Test</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Unit Test
		</div>
		<div class = "subtitle">General Rules</div>
		<div class = "block">
			<li>A testing unit should focus on one tiny bit of functionality and prove it correct</li>
			<li>Each test unit must be fully independent</li>
			<li>Try hard to make tests that run fast</li>
			<li>Learn your tools and learn how to run a single test or a test case</li>
			<li>Always run the full test suite before a coding session, and run it again after</li>
			<li>Runs all tests before pushing code to a shared repository</li>
			<li>Use long and descriptive names for testing functions</li>
		</div>
		<div class = "subtitle">Test Outcomes</div>
		<div class = "block">
			<li>ok, the test passes</li>
			<li>FAIL, the test does not pass, and raises an AssertionError exception</li>
			<li>ERROR, the test raises an exception other than AssertionError</li>
		</div>
		<div class = "subtitle">Layout and pytest</div>
		<div class = "block">
			<li><a href = "Unittest_source.htm">Source Code</a></li>
		<pre class = "prettyprint linenums">
# get source code 
git clone https://github.com/lin-chen-Langley/prime
		</pre>
			<p style = "text-align:center;"><img src = "img/Build_2.png" width = "40%"></p>
		</div>
		<div class = "subtitle">Option 1. pytest</div>
		<div class = "block">
			<li>Use <span>pytest</span> instead of default test, the default test may ignore some exceptions</li>
			<li>Implement test (2 options)
				<ul>
					<li>python setup.py test, aliase pytest to test</li>
					<li>python setup.py pytest</li>
				</ul>
			</li>
			<li>pytest will search for <span>test_*.py</span> or <span>*_test.py</span> files in <span>test</span> folder, imported by their test package name, collect test_ prefixed test functions or methods as test items</li>
			<li>test does not install dependencies to system, it install the copies of dependencies to <span>.eggs</span> in the project folder</li>
			<li>test files must have unique names, the test files will be imported as top-level modules by adding test/ to sys.path</li>
		</div>
		<div class = "block">
			<span>developer</span>
		<pre class = "prettyprint linenums">
python setup.py test # assure that the source code can pass all tests before is deposited to a repository
		</pre>
			<span>users</span>
		<pre class = "prettyprint linenums">
git clone URL
python setup.py test # make sure that the code can pass all the tests
python setup.py install # install the program

or
pip install
		</pre>
		</div>
		<div class = "subtitle">Option 2. tox</div>
		<div class = "block">
			<ol>
				<li>configuration, load tox.in, use Python3.9</li>
				<li>packaging, create a source distribution</li>
				<li>environment, create a virtual environment with virtualenv in <span>.tox</span> folder, install packages and dependencies, run commands</li>
				<li>report, print out a report of outcomes for each tox environment</li>
			</ol>
		</div>
		<div class = "block">
			<span>tox.ini</span>
		<pre class = "prettyprint linenums">
# content of: tox.ini , put in same dir as setup.py
[tox]
envlist = py39

[testenv]
# install pytest in the virtualenv where commands will be executed
deps = pytest
commands =
    # NOTE: you can run any command line tool here - not just tests
    pytest
		</pre>
		</div>
		<div class = "block">
			<span>developer</span>
		<pre class = "prettyprint linenums">
tox # implement tests
		</pre>
			<span>users</span>
		<pre class = "prettyprint linenums">
git clone URL
tox # make sure that the code can pass all the tests
python setup.py install # install the program

or
pip install
		</pre>
		</div>
		<div class = "subtitle">Unit Test Option 1. Unittest</div>
		<div class = "block">
			<li>test fixture, the preparation needed to perform one or more tests
				<ul>
					<li>setUp(), execute before each test method</li>
					<li>tearDown(), execute after each test method</li>
				</ul>
			</li>
			<li>test case, a test case is the smallest unit of testing
				<ul>
					<li>test_*(), all functions starting with "test_"</li>
				</ul>
			</li>
			<li>test suite, a collection of test cases, test suites, or both
				<ul>
					<li>suite = unittest.TestLoader().loadTestsFromTestCase(SimplisticTest);</li>
					<li>suite_2 = unittest.TestLoader().loadTestsFromTestCase(secondTest);</li>
					<li>allTests = unittest.TestSuite([suite, suite_2])</li>
				</ul>
			</li>
			<li>test runner, orchestrates the execution of tests and provides the outcomes to the user
				<ul>
					<li>unittest.TextTestRunner(verbosity=2).run(allTests)</li>
					<li>unittest.main()</li>
				</ul>
			</li>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
import unittest

# import the tested package

class TestClassName(unittest.TestCase):
	def setUp():
		# define instructions that will be executed before each test method

	def tearDown():
		# define instructions that will be executed before and after each test method

	def test_function():
		# function name starts with the letters "test"
		</pre>
		</div>
		<div class = "block">
			<span>test/test_is_prime.py</span>
		<pre class = "prettyprint linenums">
#!/usr/bin/python

import unittest
from primepackage import is_prime

class Test_is_prime(unittest.TestCase):

    def setUp(self):
        # Set up database, parameters before each method is tested ...
        self.fixture = 10

    def tearDown(self):
        # Tear down database, parameters after each method is tested ...
        del self.fixture

    def test_numbers(self):
        self.assertEqual(is_prime(2), True)
        self.assertEqual(is_prime(8), False)
        self.assertEqual(is_prime(1), False)
        self.assertEqual(is_prime(83), True)
        self.assertEqual(is_prime(self.fixture), False)

    def test_raises(self):
        with self.assertRaises(ValueError):
            is_prime(0)
            is_prime(3.14)
            is_prime('Hello')

if __name__ == '__main__':
    unittest.main()
		</pre>
		</div>
		<div class = "block">
			<span>test/test_suit.py</span>
		<pre class = "prettyprint linenums">
#!/usr/bin/python

import sys
import unittest
from primepackage import is_prime

class Test_is_prime(unittest.TestCase):

    def setUp(self):
        # Set up database, parameters before each method is tested ...
        self.fixture = 10

    def tearDown(self):
        # Tear down database, parameters after each method is tested ...
        del self.fixture

    def test_numbers(self):
        self.assertEqual(is_prime(2), True)
        self.assertEqual(is_prime(8), False)
        self.assertEqual(is_prime(1), False)
        self.assertEqual(is_prime(83), True)
        self.assertEqual(is_prime(self.fixture), False)

    def test_raises(self):
        with self.assertRaises(ValueError):
            is_prime(0)
            is_prime(3.14)
            is_prime('Hello')

class Test_more(unittest.TestCase):
    def test_numbers(self):
        self.assertEqual(is_prime(100), False)

    def test_raises(self):
        with self.assertRaises(ValueError):
            is_prime(-1)

if __name__ == '__main__':
    suite_1 = unittest.TestLoader().loadTestsFromTestCase(Test_is_prime);
    suite_2 = unittest.TestLoader().loadTestsFromTestCase(Test_more);
    allTests = unittest.TestSuite([suite_1, suite_2]);
    #unittest.TextTestRunner(verbosity=2).run(allTests);
    unittest.main();
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# in /Prime folder
python setup.py test
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# use test discover to implement multiple test files
# in /src folder
python -m unittest discover ../test "test*.py"
		</pre>
		</div>
		<div class = "subtitle">Unit Test Option 2. assert</div>
		<div class = "block">
			<span>test/test_assert.py</span>
		<pre class = "prettyprint linenums">
#!/usr/bin/python
 
from primepackage import is_prime
 
def test_numbers():
    response = is_prime(1)
    assert response == False
 
    response = is_prime(2)
    assert response == True
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# in /Prime folder
python setup.py test
		</pre>
		</div>
		<div class = "subtitle">Unit Test Option 3. Nose</div>
		<div class = "block">
			<span>test/test_nose.py</span>
			<pre class = "prettyprint linenums">
#!/usr/bin/python
 
from primepackage import is_prime

def test_is_prime():
    response = is_prime(5)
    assert response == False
			</pre>
		</div>
		<div class = "block">
			<span>setup.py</span>
			<pre class = "prettyprint linenums">
import setuptools
 
with open('requirements.txt') as f:
    requirements = f.read().splitlines()
 
setuptools.setup(
    test_suite = 'nose.collector',
    tests_require=['nose'],
    name='linlangleyprime', # a unique name for PyPI
    version='0.7',
    author='Lin Chen, Yanhua Feng',
    author_email='lin.chen@ieee.org, yf@vims.edu',
    description='Demo for building a Python project',
    long_description=open('README.md').read(),
    long_description_content_type="text/markdown",
    url='http://lin-chen-langley.github.io',
    project_urls = {
        'PyPI': 'https://pypi.org/manage/project/linlangleyprime/releases/',
        'Conda': 'https://anaconda.org/linchenVA/linlangleyprime'
        },
    classifiers=[
      'Development Status :: 4 - Beta',
      'Environment :: X11 Applications :: GTK',
      'Intended Audience :: End Users/Desktop',
      'Intended Audience :: Developers',
      'License :: OSI Approved :: GNU General Public License (GPL)',
      'Operating System :: POSIX :: Linux',
      'Programming Language :: Python',
      'Topic :: Desktop Environment',
      'Topic :: Text Processing :: Fonts'
      ],
    install_requires=requirements,
    package_dir={'':'src'}, # location to find the packages
    packages=setuptools.find_packages(where="src"),
    #packages=['primepackage', ], # packages and subpackages containing .py files
    python_requires="&gt;=3.9",
    scripts=['src/generator',], # the executable files will be installed for user
    license='Creative Commons Attribution-Noncommercial-Share Alike license',
)
			</pre>
		</div>
		<div class = "block">
			<span>setup.cfg</span>
			<pre class = "prettyprint linenums">
[nosetests]
verbosity=1
detailed-errors=1
with-coverage=1
cover-package=nose
debug=nose.loader
			</pre>
		</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
# in /Prime folder
python setup.py test
			</pre>
		</div>
		<div class = "block">
			<li>setup_module() | teardown_module(), before and end of the module</li>
			<li>with_setup(), before and end of the function</li>
			<li>setup() | teardown(), before and end of each function in the class</li>
			<li>setup_class() | teardown_class(), before and end of the class</li>
		</div>
			<div class = "subtitle">Unit Test Option 4. Doctest</div>
		<div class = "block">
			<pre class = "prettyprint linenums">
#!/usr/bin/python

def squareTest(x):
    """Return the square of x.

    &gt;&gt;&gt; squareTest(2)
    4
    &gt;&gt;&gt; squareTest(-2)
    4
    """
    return x*x;

if __name__ == '__main__':
    import doctest
    doctest.testmod();

			</pre>
			python testCode.py -v
		</div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
			<li><a href = "https://nose.readthedocs.io/en/latest/testing.html">Testing with Nose</a></li>
			<li><a href = "https://nose.readthedocs.io/en/latest/">Nose</a></li>
			<li><a href = "https://tox.readthedocs.io/en/latest/">tox</a></li>
			<li><a href + "https://pythontesting.net/framework/pytest/pytest-introduction/">pytest introduction</a></li>
			<li><a href = "https://docs.python.org/3/library/unittest.html">unittest documentation</a></li>
			<li><a href = "http://pythontesting.net/framework/nose/nose-introduction/">nose introduction</a></li>
			<li><a href = "https://dmorgan.info/posts/python-unittest-fixtures/">Python unittest Fixtures</a></li>
			<li><a href = "https://pymotw.com/3/unittest/">unittest at PYMOTW</a></li>
			<li><a href = "https://docs.python-guide.org/writing/tests/">Hitchhiker’s Guide</a></li>
		</div>
	</body>
</html>
