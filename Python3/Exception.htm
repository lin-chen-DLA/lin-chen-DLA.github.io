<!DOCTYPE html>
<html>
	<head>
		<title>Python</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
		</style>
	</head>
	<body>
		<div class = "title">
			Exception
		</div>

		<div class = "subtitle">Handle Exception</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
try:
	clause
except ExceptI as errorInfo:
	if ExceptI is raised, execute this block
except ExceptII as errorInfo:
	if ExceptII is raised, execute this block
except:
	handle any other exception
else:
	if no exception, execute this block
finally:
	this would always be executed
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#!/usr/bin/python

try:
   fh = open("testfile", "r")
   fh.write("This is my test file for exception handling!!")
except IOError as argument:
   print ("Error: can\'t find file or read data", argument)
else:
   print ("Written content in the file successfully")
   fh.close()
finally:
    print("End of try ... except ...")
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#!/usr/bin/python

try:
   fh = open("testfile", "r")
   raise ValueError('Value Error')
except IOError as argument:
    print ("Error: can\'t find file or read data\n", argument)
except Exception as err: # handle any exceptions
    print(err)
#except: # handle any exceptions
    #print ("Error: value error\n")
else:
    print ("Written content in the file successfully")
    fh.close()
finally:
    print("End of try ... except ...")
		</pre>
		</div>

		<div class = "subtitle">Raise Exception</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
raise Exception(errorInfo)
		</pre>
		</div>

		<div class = "subtitle">Python Exception Hierarchy</div>
		<div class = "block">
			<ul>
				<li><a href = "https://docs.python.org/3/library/exceptions.html#exception-hierarchy">Exception Hierarchy</a></li>
			</ul>
		</div>

		<div class = "subtitle">Raise and Handle</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#!/usr/bin/python
 
def div(a, b):
    if b == 0:
        raise ZeroDivisionError("Denominator is zero ...");
    return a/b;
 
if __name__ == '__main__':
    try:
        div(1, 0);
    except Exception as err:
        print(err.args, err);
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#!/usr/bin/python
 
def div(a, b):
    assert b != 0, 'AssertionError: Divided by zero ...';
    return a/b;

def main():
    try:
        div(1, 0);
    except Exception as err:
        print('Catch error in main ...')
        raise # relay exception
 
if __name__ == '__main__':
    try:
        main()
    except Exception as err:
        print(err.args, err);
		</pre>
		</div>

		<div class = "subtitle">assert</div>
		<div class = "block">
			<li>If the expression is false, Python raises an AssertionError exception</li>
		<pre class = "prettyprint linenums">
#!/usr/bin/python
 
def div(a, b):
    assert b != 0, 'AssertionError: Divided by zero ...';
    return a/b;
 
if __name__ == '__main__':
    try:
        div(1, 0);
    except Exception as err:
        print(err.args, err);
		</pre>
		</div>
		<div class = "block">
			<li>python -O Exception.py, turn off assertion</li>
		<pre class = "prettyprint linenums">
# Exception.py
#!/usr/bin/python
 
def getString():
    return "Hello World!"
 
if __name__ == '__main__':
    s = getString();
    assert s == "Hello", "string is not correct ..."
    print(s) # Hello World!
		</pre>
		</div>

		<div class = "subtitle">Traceback</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#!/usr/bin/python
 
import traceback
 
if __name__ == '__main__':
    try:
        div(1, 0);
    except Exception as err:
        print(err.args, err)
        traceback.print_exc();
		</pre>
		</div>

		<div class = "subtitle">User-Defined Exceptions</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#!/usr/bin/python
 
class definedExcept(Exception):
    def __int__(self, arg):
        self.args = arg;
 
def div(a, b):
    if b == 0:
        raise definedExcept("Defined Exception ...");
    return a/b;
 
if __name__ == '__main__':
    try:
        div(1, 0);
    except Exception as err:
        print(err.args, err);
		</pre>
		</div>
		<div class = "subtitle">NotImplemented</div>
		<div class = "block">
            <li>If NotImplemented is returned, a reflection will be called</li>
            <li>Should be returned by the binary special methods, e.g. __eq__(), __lt__(), __add__()</li>
            <li>__radd__ is the reflection function of __add__, it will be used when left object has no __add__ or return NoImplemented</li>
		<pre class = "prettyprint linenums">
class MyAge(object):
    def __init__(self, n):
        self.n = n
        
    def __add__(self, other):
        if not isinstance(other, MyAge):
            print('Return NotImplemented')
            return NotImplemented
        self.n =self.n + other.n
        
    def __str__(self):
        return 'Age: %d' % self.n

class MyCar(object):
    def __init__(self, year):
        self.year = year
        
    def __radd__(self, other):
        print('Call reflection ...')
        self.year = self.year + other.n
        
    def __str__(self):
        return 'Year: %d' % self.year

a1 = MyAge(42)
a2 = MyAge(41)

a1+a2 # use __add__ of a1
print(a1) # 83

c1 = MyCar(10)
a1 + c1 # use __radd__ of c1 since a1 return NoImplemented
print(a1, c1) # 83, 93
        </pre>
        </div>
		<div class = "block">
            <li>__eq__ is the reflection function of another __eq__, no __req__</li>
            <li>== call __eq__ of left object, then call __eq__ of right object if NoImplemented is returned</li>
		<pre class = "prettyprint linenums">
class MyAge:
    def __init__(self, n):
        self.n = n
        
    def __eq__(self, other):
        if not isinstance(other, MyAge):
            return NotImplemented
        return self.n == other.n

class MyCar(object):
    def __init__(self, year):
        self.year = year
        
    def __eq__(self, other):
        print('Call reflection ...')
        return False
        
    def __str__(self):
        return 'Year: %d' % self.year

a1 = MyAge(42)
a2 = MyAge(42)

a1 == a2 # __eq__ in MyAge, True

c1 = MyCar(10)
a1 == c1 # __eq__ in MyCar, False
        </pre>
        </div>

		<div class = "subtitle">Reference</div>
		<div class = "block">
			<ul>
				<li><a href = "https://docs.python.org/3/tutorial/errors.html">Python Tutorial</a></li>
				<li><a href = "https://www.tutorialspoint.com/python3/python_exceptions.htm">Tutorialspoint</a></li>
				<li>Starting out with Python</li>
			</ul>
		</div>
	</body>
</html>
