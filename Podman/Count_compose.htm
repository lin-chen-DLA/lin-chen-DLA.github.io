<!DOCTYPE html>
<html>
	<head>
		<title>Podman</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Count
		</div>
        <div class = "block">
            <p style = "text-align:center;"><img src = "../Docker/img/Docker_16.png" width = "50%"></p>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# app.py
import os
import time
import redis
from flask import Flask

def get_ip():
    return os.getenv('MYREDIS_HOST', 'localhost')

app = Flask(__name__)
cache = redis.Redis(host=get_ip(), port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello from Docker! I have been seen {} times.\n'.format(count)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# Create the dependent package list
# pip freeze &gt; requirements.txt
flask
redis
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# Dockerfile
FROM python:3.7-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["python", "app.py"]
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# compose.yaml
version: "3.9"
services:
  webapp:
    image: lchenlangley/count
    build: .
    ports:
      - 8000:5000
    volumes:
      - voltemp:/code
        #- .:/code
    environment:
      - MYREDIS_HOST=redisserver
      - FLASK_ENV=development
    depends_on:
      - redisserver
  redisserver:
    image: "redis:alpine"
volumes:
  voltemp:
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# Add directories to allow bind mount in "FILE SHARING" under "Resources" of Docker Desktop
# 1. Create app.py
# 2. Create requirements.txt
# 3. Create Dockerfile
# 4. Create compose.yaml
# 5. Start containers

podman-compose up

# 6. Access the app
http://localhost:8000/
        </pre>
        </div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# end containers
podman-compose down
        </pre>
        </div>
    </body>
</html>
