<!DOCTYPE html>
<html>
	<head>
		<title>Python</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
            span {color:red; font-weight:bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			lldb
		</div>

		<div class = "block">
		<li>A command-line debugger</li>
		</div>

        <div class = "subtitle">Workflow</div>
        <div class = "block">
			<p style = "text-align:center;"><img src = "img/lldb_2.png" width = "50%"></p>
        </div>
        <div class = "subtitle">Frame Command</div>
        <div class = "block">
			<p style = "text-align:center;"><img src = "img/lldb_1.png" width = "40%"></p>
		</div>
		</div>
		<div class = "subtitle">Debug with LLDB</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#include &lt;iostream&gt;
using namespace std;

void f_2()
{
    int y = 10;
    cout&lt;&lt;"f2"&lt;&lt;", "&lt;&lt;y&lt;&lt;endl;
}

void f_1()
{
    int z = 100;
    f_2();
    cout&lt;&lt;"f1"&lt;&lt;", "&lt;&lt;z&lt;&lt;endl;
}

int main()
{
    int x = 4;
    int *p = NULL;

    f_1();

    *p = 3; # segmentation fault

    cout&lt;&lt;x&lt;&lt;", "&lt;&lt;*p&lt;&lt;endl;

    return 0;
}
        </pre>
		</div>
		<div class = "subtitle">Compile</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# compile, display c++ source code
# -Wall, lists warnings
# -gï¼Œ include information about the source file (the .cpp file)
g++ s.cpp -Wall -g # output an executable file, a.out

# compile, display assemble code
g++ s.cpp -Wall
        </pre>
		</div>
            <div class = "subtitle">List Command</div>
            <div class = "block">
                <li>Display source code</li>
            <pre class = "prettyprint linenums">
# list [file_name]:[line_number]
list a4.cpp:10
l a4.cpp:10

# list [line_number]
list 10

# list [function_name]
list f_1
            </pre>
            </div>
            <div class = "subtitle">Source Command</div>
            <div class = "block">
                <li>Examine source code</li>
            <pre class = "prettyprint linenums">
# current line
source info

# list source code
source list --line 10
            </pre>
            </div>
            <div class = "subtitle">Image Command</div>
            <div class = "block">
                <li>Inspect and interact with the images</li>
                <li>An <span>image</span> refers to any executable or shared library loaded into the program's address space</li>
            <pre class = "prettyprint linenums">
# list images
image list

# finds symbols, functions, or addresses in the loaded images
image lookup --address 0x0010e0
image lookup --symbol f_1
image lookup --name f_1
            </pre>
            </div>
            <div class = "subtitle">Breakpoint Command</div>
            <div class = "block">
            <pre class = "prettyprint linenums">
# executable file compiled with -g, display C++ source code
breakpoint
br # abbreviation
b # abbreviation

# set a breakpoint by function name
breakpoint set --name f_1
br s -n f_1
b f_2

# set a breakpoint by memory address
breakpoint set --address 0x0000000100003044
br s -a 0x0000000100003044
b 0x0000000100003044

# set a breakpoint by line number
breakpoint set --line 10
br s -l 10
b 10

# set a one-shot breakpoint
tbreak f_1

# list breakpoints
breakpoint list
br l
b

# delete breakpoint by id
breakpoint delete 4
br del 4

# remove all breakpoints
breakpoint delete
br del

# disable breakpoint by id
breakpoint disable # disable all breakpoints
breakpoint disable 4
br dis 4

# enable break point by id
breakpoint enable # enable all breakpoints
breakpoint enable 4
br en 4

# write breakpoints into a file
breakpoint write -f b.json

# read breakpoints from a file
breakpoint read -f b.json
            </pre>
            </div>
            <div class = "block">
            <pre class = "prettyprint linenums">
# executable file compiled without -g, display assemble code

# set a breakpoint by function name
breakpoint set --name my_subroutine
br s -n my_subroutine
b my_subroutine

# list breakpoints
breakpoint list
br l
b

# delete breakpoint by id
breakpoint delete 4
br del 4

# disable breakpoint by id
breakpoint disable # disable all breakpoints
breakpoint disable 4
br dis 4

# enable breakpoint by id
breakpoint enable # enable all breakpoints
breakpoint enable 4
br en 4
            </pre>
            </div>
            <div class = "subtitle">Run Command</div>
		<div class = "block">
            <li>Start executing the target program from the beginning</li>
            <li>Run until hit a breakpoint, encounters an error, or completes</li>
		<pre class = "prettyprint linenums">
run
r # abbreviation
        </pre>
        </div>
            <div class = "subtitle">Frame Command</div>
            <div class = "block">
			<p style = "text-align:center;"><img src = "img/lldb_1.png" width = "40%"></p>
		</div>
		<div class = "block">
            <li>Inspect and manipulate the current stack frame</li>
            <li>Refers to a stack frame, created by a function call</li>
            <li>Contains the state of that function, including its local variables, arguments, and the instruction pointer indicating where execution is currently paused or running</li>
		<pre class = "prettyprint linenums">
# display information of current frame
frame info

# list frames
bt

# select a frame
frame select 2
f 2

# display variables in the current frame
frame variable
var
vo

# display the variable of a variable in the current frame
frame variable x

# move to the caller of the current frame
up

# move to the callee of the current frame
down

# finish executing the current stack frame and stop after returning
finish
        </pre>
        </div>
            <div class = "subtitle">Print Command</div>
		<div class = "block">
            <li>Evaluate and display the value of expressions, variables, or memory locations</li>
		<pre class = "prettyprint linenums">
# print variable
print x
p x
call x

# print pointer's value
print *p

# evaluate expression
print x+10

# call function
print f_1()
call f_1()
        </pre>
        </div>
            <div class = "subtitle">Display Command</div>
		<div class = "block">
            <li>Automatically evaluate and display the value of an expression each time execution stops</li>
		<pre class = "prettyprint linenums">
# display variable
display x

# display expression
display x+10

# remove monitored expression
undisplay 1
        </pre>
        </div>
            <div class = "subtitle">Expression Command</div>
		<div class = "block">
            <li>Change the value of a variable</li>
		<pre class = "prettyprint linenums">
expression x = 100
expr x = 100
        </pre>
        </div>
            <div class = "subtitle">Continue Command</div>
		<div class = "block">
            <li>Resume program execution after hitting a breakpoint, a signal, or pausing manually</li>
            <li>Execution will proceed until another breakpoint, a signal, or the program terminates</li>
		<pre class = "prettyprint linenums">
continue
c # abbreviation
        </pre>
        </div>
            <div class = "subtitle">Next Command</div>
		<div class = "block">
            <li>Executes the current line and moves to the next line</li>
            <li>Execute a function as a single step</li>
		<pre class = "prettyprint linenums">
next
n # abbreviation
        </pre>
        </div>
            <div class = "subtitle">Nexti Command</div>
		<div class = "block">
            <li>Executes the current <span>assembly instruction</span> and stops at the next instruction</li>
		<pre class = "prettyprint linenums">
nexti
ni # abbreviation
        </pre>
        </div>
            <div class = "subtitle">Step Command</div>
		<div class = "block">
            <li>Steps to the next line of code, either in the current function or inside a called function</li>
		<pre class = "prettyprint linenums">
step
s # abbreviation
        </pre>
        </div>
            <div class = "subtitle">Stepi Command</div>
		<div class = "block">
            <li>Executes the current assembly instruction and stops at the next instruction</li>
		<pre class = "prettyprint linenums">
stepi
si # abbreviation
        </pre>
        </div>
            <div class = "subtitle">Disassemble Command</div>
		<div class = "block">
            <li>Disassembled machine code instructions</li>
		<pre class = "prettyprint linenums">
# disassemble current frame
disassemble
dis
di

# disassemble a function
disassemble -n f_2

# disassemble with Source Code
disassemble -n f_2 --mixed
        </pre>
        </div>
            <div class = "subtitle">Register Command</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# displays the current values of CPU registers
register read
re r

# display the value of a specific register
register read rax
re r rax

# set value for a register
register write rax 0x42
        </pre>
        </div>
            <div class = "subtitle">Memory Command</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# reads and displays memory content starting from a given address
memory read 0x1088
x 0x1088

# write data to a specified memory address
memory write 0x1088 0x42
        </pre>
        </div>
            <div class = "subtitle">Target Command</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# create target
target a.out

# select target
target select 0

# lists all loaded targets
target list

# delete target
target delete 1
        </pre>
        </div>
            <div class = "subtitle">Process Command</div>
		<div class = "block">
            <li>Control and inspect the process being debugged</li>
		<pre class = "prettyprint linenums">
# launches the target process
process launch # run

# resumes the execution of the target process
process continue # continue

# displays the current status of the target process
process status

# terminates the target process
process kill # kill
        </pre>
        </div>
		<div class = "subtitle">Quit Commands</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
quit # quit lldb
q # abbreviation of quit
exit # alternative
		</div>
		<div class = "subtitle">Command Commands</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# display the history of commands
command history
        </pre>
        </div>
		<div class = "subtitle">Help Commands</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# help
help # show commands
help stepi # display details of a specific command
        </pre>
		</div>
		<div class = "subtitle">Reference</div>
		<div class = "block">
			<li><a href = "https://aaronbloomfield.github.io/pdr/tutorials/02-lldb/index.html">Tutorial</a></li>
            		<li><a href = "https://lldb.llvm.org/">Documentation</a></li>
        	</div>
    </body>
</html>
